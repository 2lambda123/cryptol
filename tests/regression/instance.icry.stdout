Loading module Cryptol
Loading module Cryptol
Loading module Float
Loading module instance
zero`{Bit} : Bit
zero`{Integer} : Integer
zero`{Rational} : Rational
zero`{Z _} : {n} (n >= 1, fin n) => Z n
zero`{[_]_} : {n, a} (Zero a) => [n]a
zero`{_ -> _} : {a, b} (Zero b) => a -> b
zero`{()} : ()
zero`{(_, _)} : {a, b} (Zero b, Zero a) => (a, b)
zero`{{}} : {}
zero`{{x : _, y : _}} : {a, b} (Zero b, Zero a) => {x : a, y : b}
zero`{Float _ _} : {n, m} (ValidFloat n m) => Float n m
complement`{Bit} : Bit -> Bit

[error] at <interactive>:1:1--1:11:
  • Type `Integer` does not support logical operations.
      arising from
      use of expression complement
      at <interactive>:1:1--1:11

[error] at <interactive>:1:1--1:11:
  • Type `Rational` does not support logical operations.
      arising from
      use of expression complement
      at <interactive>:1:1--1:11

[error] at <interactive>:1:1--1:11:
  • Type `Z ?m` does not support logical operations.
      arising from
      use of expression complement
      at <interactive>:1:1--1:11
  where
  ?m is type wildcard (_) at <interactive>:1:15--1:16
complement`{[_]_} : {n, a} (Logic a) => [n]a -> [n]a
complement`{(_ -> _)} : {a, b} (Logic b) => (a -> b) -> a -> b
complement`{()} : () -> ()
complement`{(_, _)} : {a, b} (Logic b, Logic a) => (a, b) -> (a, b)
complement`{{}} : {} -> {}
complement`{{x : _, y : _}} : {a, b} (Logic b, Logic a) =>
                                {x : a, y : b} -> {x : a, y : b}

[error] at <interactive>:1:1--1:11:
  • Type `Float ?m ?n` does not support logical operations.
      arising from
      use of expression complement
      at <interactive>:1:1--1:11
  where
  ?m is type wildcard (_) at <interactive>:1:19--1:20
  ?n is type wildcard (_) at <interactive>:1:21--1:22

[error] at <interactive>:1:1--1:7:
  • Type `Bit` does not support ring operations.
      arising from
      use of expression negate
      at <interactive>:1:1--1:7
negate`{Integer} : Integer -> Integer
negate`{Rational} : Rational -> Rational
negate`{Z _} : {n} (n >= 1, fin n) => Z n -> Z n
negate`{[_]} : {n} (fin n) => [n] -> [n]
negate`{[_]_} : {n, a} (Ring ([n]a)) => [n]a -> [n]a
negate`{(_ -> _)} : {a, b} (Ring b) => (a -> b) -> a -> b
negate`{()} : () -> ()
negate`{(_, _)} : {a, b} (Ring b, Ring a) => (a, b) -> (a, b)
negate`{{}} : {} -> {}
negate`{{x : _, y : _}} : {a, b} (Ring b, Ring a) =>
                            {x : a, y : b} -> {x : a, y : b}
negate`{Float _ _} : {n, m} (ValidFloat n m) =>
                       Float n m -> Float n m

[error] at <interactive>:1:1--1:4:
  • `Bit` is not an integral type.
      arising from
      use of expression (%)
      at <interactive>:1:1--1:4
(%)`{Integer} : Integer -> Integer -> Integer

[error] at <interactive>:1:1--1:4:
  • `Rational` is not an integral type.
      arising from
      use of expression (%)
      at <interactive>:1:1--1:4

[error] at <interactive>:1:1--1:4:
  • `Z ?m` is not an integral type.
      arising from
      use of expression (%)
      at <interactive>:1:1--1:4
  where
  ?m is type wildcard (_) at <interactive>:1:8--1:9
(%)`{[_]_} : {n, a} (Integral ([n]a)) => [n]a -> [n]a -> [n]a

[error] at <interactive>:1:1--1:4:
  • `?a -> ?b` is not an integral type.
      arising from
      use of expression (%)
      at <interactive>:1:1--1:4
  where
  ?a is type wildcard (_) at <interactive>:1:7--1:8
  ?b is type wildcard (_) at <interactive>:1:12--1:13

[error] at <interactive>:1:1--1:4:
  • `()` is not an integral type.
      arising from
      use of expression (%)
      at <interactive>:1:1--1:4

[error] at <interactive>:1:1--1:4:
  • `(?a, ?b)` is not an integral type.
      arising from
      use of expression (%)
      at <interactive>:1:1--1:4
  where
  ?a is type wildcard (_) at <interactive>:1:7--1:8
  ?b is type wildcard (_) at <interactive>:1:10--1:11

[error] at <interactive>:1:1--1:4:
  • `{}` is not an integral type.
      arising from
      use of expression (%)
      at <interactive>:1:1--1:4

[error] at <interactive>:1:1--1:4:
  • `{x : ?a, y : ?b}` is not an integral type.
      arising from
      use of expression (%)
      at <interactive>:1:1--1:4
  where
  ?a is type wildcard (_) at <interactive>:1:11--1:12
  ?b is type wildcard (_) at <interactive>:1:18--1:19

[error] at <interactive>:1:1--1:4:
  • `Float ?m ?n` is not an integral type.
      arising from
      use of expression (%)
      at <interactive>:1:1--1:4
  where
  ?m is type wildcard (_) at <interactive>:1:12--1:13
  ?n is type wildcard (_) at <interactive>:1:14--1:15

[error] at <interactive>:1:1--1:6:
  • Type `Bit` does not support field operations.
      arising from
      use of expression recip
      at <interactive>:1:1--1:6

[error] at <interactive>:1:1--1:6:
  • Type `Integer` does not support field operations.
      arising from
      use of expression recip
      at <interactive>:1:1--1:6
recip`{Rational} : Rational -> Rational
recip`{Z _} : {n} (prime n, n >= 1) => Z n -> Z n

[error] at <interactive>:1:1--1:6:
  • Type `[?m]?a` does not support field operations.
      arising from
      use of expression recip
      at <interactive>:1:1--1:6
  where
  ?m is type wildcard (_) at <interactive>:1:9--1:10
  ?a is type wildcard (_) at <interactive>:1:11--1:12

[error] at <interactive>:1:1--1:6:
  • Type `?a -> ?b` does not support field operations.
      arising from
      use of expression recip
      at <interactive>:1:1--1:6
  where
  ?a is type wildcard (_) at <interactive>:1:9--1:10
  ?b is type wildcard (_) at <interactive>:1:14--1:15

[error] at <interactive>:1:1--1:6:
  • Type `()` does not support field operations.
      arising from
      use of expression recip
      at <interactive>:1:1--1:6

[error] at <interactive>:1:1--1:6:
  • Type `(?a, ?b)` does not support field operations.
      arising from
      use of expression recip
      at <interactive>:1:1--1:6
  where
  ?a is type wildcard (_) at <interactive>:1:9--1:10
  ?b is type wildcard (_) at <interactive>:1:12--1:13

[error] at <interactive>:1:1--1:6:
  • Type `{}` does not support field operations.
      arising from
      use of expression recip
      at <interactive>:1:1--1:6

[error] at <interactive>:1:1--1:6:
  • Type `{x : ?a, y : ?b}` does not support field operations.
      arising from
      use of expression recip
      at <interactive>:1:1--1:6
  where
  ?a is type wildcard (_) at <interactive>:1:13--1:14
  ?b is type wildcard (_) at <interactive>:1:20--1:21
recip`{Float _ _} : {n, m} (ValidFloat n m) =>
                      Float n m -> Float n m

[error] at <interactive>:1:1--1:6:
  • Type `Bit` does not support rounding operations.
      arising from
      use of expression floor
      at <interactive>:1:1--1:6

[error] at <interactive>:1:1--1:6:
  • Type `Integer` does not support rounding operations.
      arising from
      use of expression floor
      at <interactive>:1:1--1:6
floor`{Rational} : Rational -> Integer

[error] at <interactive>:1:1--1:6:
  • Type `Z ?m` does not support rounding operations.
      arising from
      use of expression floor
      at <interactive>:1:1--1:6
  where
  ?m is type wildcard (_) at <interactive>:1:10--1:11

[error] at <interactive>:1:1--1:6:
  • Type `[?m]?a` does not support rounding operations.
      arising from
      use of expression floor
      at <interactive>:1:1--1:6
  where
  ?m is type wildcard (_) at <interactive>:1:9--1:10
  ?a is type wildcard (_) at <interactive>:1:11--1:12

[error] at <interactive>:1:1--1:6:
  • Type `?a -> ?b` does not support rounding operations.
      arising from
      use of expression floor
      at <interactive>:1:1--1:6
  where
  ?a is type wildcard (_) at <interactive>:1:9--1:10
  ?b is type wildcard (_) at <interactive>:1:14--1:15

[error] at <interactive>:1:1--1:6:
  • Type `()` does not support rounding operations.
      arising from
      use of expression floor
      at <interactive>:1:1--1:6

[error] at <interactive>:1:1--1:6:
  • Type `(?a, ?b)` does not support rounding operations.
      arising from
      use of expression floor
      at <interactive>:1:1--1:6
  where
  ?a is type wildcard (_) at <interactive>:1:9--1:10
  ?b is type wildcard (_) at <interactive>:1:12--1:13

[error] at <interactive>:1:1--1:6:
  • Type `{}` does not support rounding operations.
      arising from
      use of expression floor
      at <interactive>:1:1--1:6

[error] at <interactive>:1:1--1:6:
  • Type `{x : ?a, y : ?b}` does not support rounding operations.
      arising from
      use of expression floor
      at <interactive>:1:1--1:6
  where
  ?a is type wildcard (_) at <interactive>:1:13--1:14
  ?b is type wildcard (_) at <interactive>:1:20--1:21
floor`{Float _ _} : {n, m} (ValidFloat n m) => Float n m -> Integer
(==)`{Bit} : Bit -> Bit -> Bit
(==)`{Integer} : Integer -> Integer -> Bit
(==)`{Rational} : Rational -> Rational -> Bit
(==)`{Z _} : {n} (n >= 1, fin n) => Z n -> Z n -> Bit
(==)`{[_]_} : {n, a} (Eq a, fin n) => [n]a -> [n]a -> Bit

[error] at <interactive>:1:1--1:5:
  • Type `?a -> ?b` does not support equality.
      arising from
      use of expression (==)
      at <interactive>:1:1--1:5
  where
  ?a is type wildcard (_) at <interactive>:1:8--1:9
  ?b is type wildcard (_) at <interactive>:1:13--1:14
(==)`{()} : () -> () -> Bit
(==)`{(_, _)} : {a, b} (Eq b, Eq a) => (a, b) -> (a, b) -> Bit
(==)`{{}} : {} -> {} -> Bit
(==)`{{x : _, y : _}} : {a, b} (Eq b, Eq a) =>
                          {x : a, y : b} -> {x : a, y : b} -> Bit
(==)`{Float _ _} : {n, m} (ValidFloat n m) =>
                     Float n m -> Float n m -> Bit
(<)`{Bit} : Bit -> Bit -> Bit
(<)`{Integer} : Integer -> Integer -> Bit
(<)`{Rational} : Rational -> Rational -> Bit

[error] at <interactive>:1:1--1:4:
  • Type `Z ?m` does not support comparisons.
      arising from
      use of expression (<)
      at <interactive>:1:1--1:4
  where
  ?m is type wildcard (_) at <interactive>:1:8--1:9
(<)`{[_]_} : {n, a} (Cmp a, fin n) => [n]a -> [n]a -> Bit

[error] at <interactive>:1:1--1:4:
  • Type `?a -> ?b` does not support comparisons.
      arising from
      use of expression (<)
      at <interactive>:1:1--1:4
  where
  ?a is type wildcard (_) at <interactive>:1:7--1:8
  ?b is type wildcard (_) at <interactive>:1:12--1:13
(<)`{()} : () -> () -> Bit
(<)`{(_, _)} : {a, b} (Cmp b, Cmp a) => (a, b) -> (a, b) -> Bit
(<)`{{}} : {} -> {} -> Bit
(<)`{{x : _, y : _}} : {a, b} (Cmp b, Cmp a) =>
                         {x : a, y : b} -> {x : a, y : b} -> Bit
(<)`{Float _ _} : {n, m} (ValidFloat n m) =>
                    Float n m -> Float n m -> Bit

[error] at <interactive>:1:1--1:5:
  • Type `Bit` does not support signed comparisons.
      arising from
      use of expression (<$)
      at <interactive>:1:1--1:5

[error] at <interactive>:1:1--1:5:
  • Type `Integer` does not support signed comparisons.
      arising from
      use of expression (<$)
      at <interactive>:1:1--1:5

[error] at <interactive>:1:1--1:5:
  • Type `Rational` does not support signed comparisons.
      arising from
      use of expression (<$)
      at <interactive>:1:1--1:5

[error] at <interactive>:1:1--1:5:
  • Type `Z ?m` does not support signed comparisons.
      arising from
      use of expression (<$)
      at <interactive>:1:1--1:5
  where
  ?m is type wildcard (_) at <interactive>:1:9--1:10
(<$)`{[_]_} : {n, a} (SignedCmp ([n]a)) => [n]a -> [n]a -> Bit

[error] at <interactive>:1:1--1:5:
  • Type `?a -> ?b` does not support signed comparisons.
      arising from
      use of expression (<$)
      at <interactive>:1:1--1:5
  where
  ?a is type wildcard (_) at <interactive>:1:8--1:9
  ?b is type wildcard (_) at <interactive>:1:13--1:14
(<$)`{()} : () -> () -> Bit
(<$)`{(_, _)} : {a, b} (SignedCmp b, SignedCmp a) =>
                  (a, b) -> (a, b) -> Bit
(<$)`{{}} : {} -> {} -> Bit
(<$)`{{x : _, y : _}} : {a, b} (SignedCmp b, SignedCmp a) =>
                          {x : a, y : b} -> {x : a, y : b} -> Bit

[error] at <interactive>:1:1--1:5:
  • Type `Float ?m ?n` does not support signed comparisons.
      arising from
      use of expression (<$)
      at <interactive>:1:1--1:5
  where
  ?m is type wildcard (_) at <interactive>:1:13--1:14
  ?n is type wildcard (_) at <interactive>:1:15--1:16
number`{rep = Bit} : {n} (1 >= n) => Bit

[error] at <interactive>:1:1--1:7:
  Ambiguous numeric type: type argument 'val' of 'number'

[error] at <interactive>:1:1--1:7:
  Ambiguous numeric type: type argument 'val' of 'number'
number`{rep = Z _} : {n, m} (m >= 1 + n, m >= 1, fin m, fin n) =>
                       Z m
number`{rep = [_]_} : {n, m} (m >= width n, fin m, fin n) => [m]

[error] at <interactive>:1:1--1:7:
  • `?m` is not a valid literal of type `?a -> ?b`
      arising from
      use of literal or demoted expression
      at <interactive>:1:1--1:7
  where
  ?m is type argument 'val' of 'number' at <interactive>:1:1--1:7
  ?a is type wildcard (_) at <interactive>:1:15--1:16
  ?b is type wildcard (_) at <interactive>:1:20--1:21

[error] at <interactive>:1:1--1:7:
  • `?m` is not a valid literal of type `()`
      arising from
      use of literal or demoted expression
      at <interactive>:1:1--1:7
  where
  ?m is type argument 'val' of 'number' at <interactive>:1:1--1:7

[error] at <interactive>:1:1--1:7:
  • `?m` is not a valid literal of type `(?a, ?b)`
      arising from
      use of literal or demoted expression
      at <interactive>:1:1--1:7
  where
  ?m is type argument 'val' of 'number' at <interactive>:1:1--1:7
  ?a is type wildcard (_) at <interactive>:1:16--1:17
  ?b is type wildcard (_) at <interactive>:1:19--1:20

[error] at <interactive>:1:1--1:7:
  • `?m` is not a valid literal of type `{}`
      arising from
      use of literal or demoted expression
      at <interactive>:1:1--1:7
  where
  ?m is type argument 'val' of 'number' at <interactive>:1:1--1:7

[error] at <interactive>:1:1--1:7:
  • `?m` is not a valid literal of type `{x : ?a, y : ?b}`
      arising from
      use of literal or demoted expression
      at <interactive>:1:1--1:7
  where
  ?m is type argument 'val' of 'number' at <interactive>:1:1--1:7
  ?a is type wildcard (_) at <interactive>:1:20--1:21
  ?b is type wildcard (_) at <interactive>:1:27--1:28
number`{rep = Float _ _} : {n, m, i} (ValidFloat m i,
                                      Literal n (Float m i)) =>
                             Float m i
