// ys      | zs      | acc
// ––––––––+–-–––––––+–––––––––––
// [1,2,3] | []      | []
// [2,3]   | [1]     | [1]
// [3]     | [1,2]   | [1,1,2]
// []      | [1,2,3] | [1,1,2,1,2,3]

inits : {n, a} (fin n) => [n]a -> [(n * (n+1))/2]a
inits xs
  | n == 0 => []
  | n >  0 => go xs' x []
    where
      (x : [1]_) # xs' = xs
      
      go : {l, m} (fin l, fin m, l + m == n, m >= 1) =>
        [l]a -> [m]a -> 
        [((m-1) * ((m-1)+1))/2]a ->
        [(n * (n+1))/2]a
      go ys zs acc
        | l == 0 => acc # zs
        | l >  0 => go ys' (zs # y) (acc # zs)
          where 
            (y : [1]_) # ys' = ys


property inits_correct =
  (inits [] == []) &&
  (inits [1] == [1]) &&
  (inits [1,2] == [1,1,2]) &&
  (inits [1,2,3] == [1,1,2,1,2,3]) &&
  (inits [1,2,3,4] == [1,1,2,1,2,3,1,2,3,4]) &&
  (inits [1,2,3,4,5] == [1,1,2,1,2,3,1,2,3,4,1,2,3,4,5])
