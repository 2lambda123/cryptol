module PrimeEC where

type ProjectivePoint p =
  { x : Z p
  , y : Z p
  , z : Z p
  }

type AffinePoint p =
  { x : Z p
  , y : Z p
  }

ec_is_point_affine : {p} (prime p, p > 3) => Z p -> AffinePoint p -> Bit
ec_is_point_affine b S = S.y ^^ 2 == S.x ^^ 3 - (3*S.x) + b

ec_projectify : {p} (prime p, p > 3) => AffinePoint p -> ProjectivePoint p
ec_projectify R = { x = R.x, y = R.y, z = 1 }

ec_affinify : {p} (prime p, p > 3) => ProjectivePoint p -> AffinePoint p
ec_affinify S = if S.z == 0 then error "Cannot affinify the point at infinity" else R
    where
      R = {x = lambda^^2 * S.x, y = lambda^^3 * S.y }
      lambda = recip S.z

ZtoBV : {p, a} (fin p, p >= 1, fin a) => Z p -> [a]
ZtoBV x = (fromInteger (fromZ x))

BVtoZ : {p, a} (fin p, p >= 1, fin a) => [a] -> Z p
BVtoZ x = (fromInteger (toInteger x))

primitive ec_double : {p} (prime p, p > 3) => ProjectivePoint p -> ProjectivePoint p

primitive ec_add : {p} (prime p, p > 3) => ProjectivePoint p -> ProjectivePoint p -> ProjectivePoint p

ec_full_add : {p} (prime p, p > 3) => ProjectivePoint p -> ProjectivePoint p -> ProjectivePoint p
ec_full_add S T =
  if S.z == 0 then T
   | T.z == 0 then S
   | R == { x = 0, y = 0, z = 0 } then ec_double S
   else R
 where R = ec_add S T

ec_full_sub : {p} (prime p, p > 3) => ProjectivePoint p -> ProjectivePoint p -> ProjectivePoint p
ec_full_sub S T = ec_full_add S U
 where U = { x = T.x, y = -T.y, z = T.z }

primitive ec_mult : {p} (prime p, p > 3) => Z p -> ProjectivePoint p -> ProjectivePoint p

primitive ec_twin_mult : {p} (prime p, p > 3) => Z p -> ProjectivePoint p -> Z p -> ProjectivePoint p -> ProjectivePoint p
