module AES where

import `AES::Algorithm

type constraint ValidKey k m = (k == 128 + m * 64, 2 >= m)

encrypt : {k,m} ValidKey k m => [k] -> [128] -> [128]
encrypt = aesEncrypt`{Mode = m}

decrypt : {k,m} ValidKey k m => [k] -> [128] -> [128]
decrypt = aesDecrypt`{Mode = m}

expandKey : {k,m} ValidKey k m => [k] -> KeySchedule m
expandKey = ExpandKey`{Mode = m}

encryptWithSchedule : {k,m} ValidKey k m => KeySchedule m -> [128] -> [128]
encryptWithSchedule = aesEncryptWithSchedule`{Mode = m}

decryptWithSchedule : {k,m} ValidKey k m => KeySchedule m -> [128] -> [128]
decryptWithSchedule = aesDecryptWithSchedule `{Mode = m}

property test k pt = decrypt k (encrypt k pt) == pt

