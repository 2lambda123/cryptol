{-# OPTIONS_GHC -w #-}
{-# OPTIONS -cpp #-}
-- |
-- Module      :  Cryptol.Parser
-- Copyright   :  (c) 2013-2016 Galois, Inc.
-- License     :  BSD3
-- Maintainer  :  cryptol@galois.com
-- Stability   :  provisional
-- Portability :  portable

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE Trustworthy #-}
module Cryptol.Parser
  ( parseModule
  , parseProgram, parseProgramWith
  , parseExpr, parseExprWith
  , parseDecl, parseDeclWith
  , parseDecls, parseDeclsWith
  , parseLetDecl, parseLetDeclWith
  , parseRepl, parseReplWith
  , parseSchema, parseSchemaWith
  , parseModName, parseHelpName
  , ParseError(..), ppError
  , Layout(..)
  , Config(..), defaultConfig
  , guessPreProc, PreProc(..)
  ) where

import           Control.Applicative as A
import           Data.Maybe(fromMaybe)
import           Data.List.NonEmpty ( NonEmpty(..), cons )
import           Data.Text(Text)
import qualified Data.Text as T
import           Control.Monad(liftM2,msum)

import Cryptol.Parser.AST
import Cryptol.Parser.Position
import Cryptol.Parser.LexerUtils hiding (mkIdent)
import Cryptol.Parser.Token
import Cryptol.Parser.ParserUtils
import Cryptol.Parser.Unlit(PreProc(..), guessPreProc)
import Cryptol.Utils.Ident(paramInstModName)
import Cryptol.Utils.RecordMap(RecordMap)

import Paths_cryptol
import qualified Data.Array as Happy_Data_Array
import qualified Data.Bits as Bits
import qualified System.IO as Happy_System_IO
import qualified System.IO.Unsafe as Happy_System_IO_Unsafe
import qualified Debug.Trace as Happy_Debug_Trace
import Control.Applicative(Applicative(..))
import Control.Monad (ap)

-- parser produced by Happy Version 1.20.0

data HappyAbsSyn 
	= HappyTerminal (Located Token)
	| HappyErrorToken Prelude.Int
	| HappyAbsSyn15 (Module PName)
	| HappyAbsSyn17 ([TopDecl PName])
	| HappyAbsSyn18 (Located (ImportG (ImpName PName)))
	| HappyAbsSyn19 (Located (ImpName PName))
	| HappyAbsSyn20 (Maybe (Located ModName))
	| HappyAbsSyn21 (Maybe (Located ImportSpec))
	| HappyAbsSyn22 ([LIdent])
	| HappyAbsSyn23 ([Ident] -> ImportSpec)
	| HappyAbsSyn24 (Program PName)
	| HappyAbsSyn34 (TopDecl PName)
	| HappyAbsSyn35 (Located Text)
	| HappyAbsSyn36 (Maybe (Located Text))
	| HappyAbsSyn37 ([([Prop PName], Expr PName)])
	| HappyAbsSyn38 (Decl PName)
	| HappyAbsSyn39 ([Decl PName])
	| HappyAbsSyn41 (Newtype PName)
	| HappyAbsSyn42 (Located (RecordMap Ident (Range, Type PName)))
	| HappyAbsSyn43 ([ LPName ])
	| HappyAbsSyn44 (LPName)
	| HappyAbsSyn45 ([Pattern PName])
	| HappyAbsSyn48 (([Pattern PName], [Pattern PName]))
	| HappyAbsSyn53 (ReplInput PName)
	| HappyAbsSyn58 ([LPName])
	| HappyAbsSyn59 (Expr PName)
	| HappyAbsSyn61 (Located [Decl PName])
	| HappyAbsSyn65 ([(Expr PName, Expr PName)])
	| HappyAbsSyn66 ((Expr PName, Expr PName))
	| HappyAbsSyn71 (NonEmpty (Expr PName))
	| HappyAbsSyn75 (Located Selector)
	| HappyAbsSyn76 ([(Bool, Integer)])
	| HappyAbsSyn77 ((Bool, Integer))
	| HappyAbsSyn78 ([Expr PName])
	| HappyAbsSyn79 (Either (Expr PName) [Named (Expr PName)])
	| HappyAbsSyn80 ([UpdField PName])
	| HappyAbsSyn81 (UpdField PName)
	| HappyAbsSyn82 ([Located Selector])
	| HappyAbsSyn83 (UpdHow)
	| HappyAbsSyn85 ([[Match PName]])
	| HappyAbsSyn86 ([Match PName])
	| HappyAbsSyn87 (Match PName)
	| HappyAbsSyn88 (Pattern PName)
	| HappyAbsSyn92 (Named (Pattern PName))
	| HappyAbsSyn93 ([Named (Pattern PName)])
	| HappyAbsSyn94 (Schema PName)
	| HappyAbsSyn95 (Located [TParam PName])
	| HappyAbsSyn96 (Located [Prop PName])
	| HappyAbsSyn98 (Located Kind)
	| HappyAbsSyn99 (TParam PName)
	| HappyAbsSyn100 ([TParam PName])
	| HappyAbsSyn103 (Type PName)
	| HappyAbsSyn107 ([ Type PName ])
	| HappyAbsSyn108 (Located [Type PName])
	| HappyAbsSyn109 ([Type PName])
	| HappyAbsSyn110 (Named (Type PName))
	| HappyAbsSyn111 ([Named (Type PName)])
	| HappyAbsSyn112 (Located Ident)
	| HappyAbsSyn114 (Located ModName)
	| HappyAbsSyn116 (Located PName)

happyExpList :: Happy_Data_Array.Array Prelude.Int Prelude.Int
happyExpList = Happy_Data_Array.listArray (0,3774) ([0,0,0,0,0,0,0,0,2048,0,0,4,1,0,0,0,0,0,0,36864,974,516,136,16386,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,16128,32782,516,4744,771,1,0,0,0,0,0,0,4096,974,516,136,2,1,0,0,0,0,0,0,4096,974,516,136,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,17344,0,0,0,0,0,0,0,0,0,0,16128,50126,516,4744,771,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,12288,14,4,4096,0,0,0,0,0,0,0,0,12288,14,4,14,16352,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,12288,14,4,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,16352,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12288,14,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,0,0,0,16390,8160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,14592,14,516,158,16354,0,0,0,0,0,0,0,4096,14,4,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8198,16352,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,14,516,4744,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,4096,14,68,8,0,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,16128,32782,1540,4744,771,0,0,0,0,0,0,0,16128,32782,516,4766,16355,0,0,0,0,0,0,0,16128,14,516,5000,2,0,0,0,0,0,0,0,256,0,4,1024,0,0,0,0,0,0,0,0,12544,14,4,136,0,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,3,0,0,0,0,0,0,0,16128,32782,516,4744,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,4096,974,516,136,10,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,8224,0,0,0,0,0,0,0,0,4096,14,516,136,2050,1,0,0,0,0,0,0,4096,974,516,136,2,0,0,0,0,0,0,0,0,0,0,2048,1024,0,0,0,0,0,0,0,0,0,0,6,5088,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,4096,14,68,8,0,0,0,0,0,0,0,0,4096,14,1540,136,2,0,0,0,0,0,0,0,4096,14,516,158,8162,0,0,0,0,0,0,0,4096,14,4,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,4096,991,516,136,16394,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,36864,974,516,136,16386,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,4096,991,516,136,16386,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,4096,990,516,136,2,0,0,0,0,0,0,0,32768,5152,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12288,4110,4,4096,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,526,4,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,64,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,8192,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,516,152,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,32,0,0,0,0,0,0,0,0,0,0,1024,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,4,2056,0,0,0,0,0,0,0,0,4096,14,4,8,0,0,0,0,0,0,0,0,4096,14,4,0,0,0,0,0,0,0,0,0,0,0,0,6,8160,0,0,0,0,0,0,0,0,0,0,6,8160,0,0,0,0,0,0,0,0,0,0,6,8160,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,4096,14,516,136,2050,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,4096,14,4,8,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,516,16520,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,14592,14,516,392,2,0,0,0,0,0,0,0,0,0,0,1024,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,516,136,2050,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,8192,0,48,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,3,0,0,0,0,0,0,0,16128,32782,516,4744,3,0,0,0,0,0,0,0,0,8192,61440,33,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,1,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8224,0,0,0,0,0,0,0,0,4096,14,516,136,2050,0,0,0,0,0,0,0,0,0,0,2048,1024,0,0,0,0,0,0,0,0,0,0,6,5088,0,0,0,0,0,0,0,4096,14,516,158,8162,0,0,0,0,0,0,0,0,0,0,6,8160,0,0,0,0,0,0,0,4096,14,4,2056,0,0,0,0,0,0,0,0,4096,14,4,8,0,0,0,0,0,0,0,0,0,0,0,6,8160,0,0,0,0,0,0,0,0,0,0,6,8160,0,0,0,0,0,0,0,0,0,0,6,8160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,17344,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,4,256,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,12288,14,4,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,644,136,1090,0,0,0,0,0,0,0,4096,14,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,6,8160,0,0,0,0,0,0,0,4096,14,4,2056,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,4,2056,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,4096,14,4,8,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,16128,32782,516,4750,771,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,14,516,4744,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18432,0,0,0,0,0,0,0,0,16128,14,516,4744,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,14,516,4744,2,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,4,0,0,0,0,0,0,0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,1,0,0,0,0,0,0,4096,974,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,4096,974,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8160,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,32782,772,4744,771,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,6,8160,0,0,0,0,0,0,0,4096,14,4,2056,0,0,0,0,0,0,0,0,4096,14,4,2056,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,4096,14,4,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,4096,14,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,4096,974,516,392,2,1,0,0,0,0,0,0,4096,974,516,136,10,1,0,0,0,0,0,0,4096,991,516,136,16386,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,4096,991,516,136,16386,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,6,8160,0,0,0,0,0,0,0,0,0,0,0,16384,1,0,0,0,0,0,0,4096,991,516,136,16386,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12288,14,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,0,0,0,0,0,0,0,0,0,0,0,4096,14,4,0,0,0,0,0,0,0,0,0,12288,14,4,0,0,0,0,0,0,0,0,0,12288,14,4,4096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,1,0,0,0,0,0,0,4096,991,516,136,16386,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,4,2056,0,0,0,0,0,0,0,0,4096,14,516,2184,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,12288,14,4,4096,0,0,0,0,0,0,0,0,0,0,0,64,24,0,0,0,0,0,0,0,0,0,0,64,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,526,4,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,24,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,4096,974,516,392,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,4096,14,4,2056,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,4096,14,4,8,0,0,0,0,0,0,0,0,0,0,128,0,1088,0,0,0,0,0,0,0,0,0,0,6,8160,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,8192,12288,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,8192,8,0,0,0,0,0,0,0,0,0,0,8192,16,0,0,0,0,0,0,0,0,0,0,8192,24,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,4096,14,4,2056,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,4096,14,4,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,1,0,0,0,0,0,0,4096,991,516,136,16386,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,128,0,1088,0,0,0,0,0,0,0,0,0,128,0,1088,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,8192,8,0,0,0,0,0,0,0,0,0,0,8192,16,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,4096,14,516,136,2,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16400,0,0,0,0,0,0,0,0,0,0,0,2048,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,1088,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,4096,14,68,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,516,2184,2,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,4096,14,4,2056,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,64,24,0,0,0,0,0,0,0,0,0,0,64,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,4,256,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,4096,14,4,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14592,14,516,136,2,0,0,0,0,0,0,0,0,0,0,16384,0,1,0,0,0,0,0,0,4096,991,516,136,16386,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16128,32782,516,4744,771,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,1088,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4096,14,4,8,0,0,0,0,0,0,0,0,0,0,0,16384,0,0,0,0,0,0,0,0,0,8192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	])

{-# NOINLINE happyExpListPerState #-}
happyExpListPerState st =
    token_strs_expected
  where token_strs = ["error","%dummy","%start_vmodule","%start_program","%start_programLayout","%start_expr","%start_decl","%start_decls","%start_declsLayout","%start_letDecl","%start_repl","%start_schema","%start_modName","%start_helpName","vmodule","module_def","vmod_body","import","impName","mbAs","mbImportSpec","name_list","mbHiding","program","program_layout","top_decls","vtop_decls","vtop_decl","top_decl","private_decls","prim_bind","parameter_decls","par_decls","par_decl","doc","mbDoc","propguards","decl","let_decls","let_decl","newtype","newtype_body","vars_comma","var","apats","indices","indices1","apats_indices","opt_apats_indices","decls","vdecls","decls_layout","repl","qop","op","pat_op","other_op","ops","expr","exprNoWhere","whereClause","typedExpr","simpleExpr","longExpr","ifBranches","ifBranch","simpleRHS","longRHS","simpleApp","longApp","aexprs","aexpr","no_sel_aexpr","sel_expr","selector","poly_terms","poly_term","tuple_exprs","rec_expr","field_exprs","field_expr","field_path","field_how","list_expr","list_alts","matches","match","pat","ipat","apat","tuple_pats","field_pat","field_pats","schema","schema_vars","schema_quals","schema_qual","kind","schema_param","schema_params","tysyn_param","tysyn_params","type","infix_type","app_type","atype","atypes","dimensions","tuple_types","field_type","field_types","ident","name","smodName","modName","qname","help_name","tick_ty","field_ty_val","field_ty_vals","NUM","FRAC","STRLIT","CHARLIT","IDENT","QIDENT","SELECTOR","'include'","'import'","'as'","'hiding'","'private'","'parameter'","'property'","'infix'","'infixl'","'infixr'","'type'","'newtype'","'module'","'submodule'","'where'","'let'","'if'","'then'","'else'","'x'","'down'","'by'","'primitive'","'constraint'","'Prop'","'propguards'","'['","']'","'<-'","'..'","'...'","'..<'","'..>'","'|'","'<'","'>'","'('","')'","','","';'","'{'","'}'","'<|'","'|>'","'='","'`'","':'","'->'","'=>'","'\\\\'","'_'","'v{'","'v}'","'v;'","'+'","'*'","'^^'","'-'","'~'","'#'","'@'","OP","QOP","DOC","%eof"]
        bit_start = st Prelude.* 192
        bit_end = (st Prelude.+ 1) Prelude.* 192
        read_bit = readArrayBit happyExpList
        bits = Prelude.map read_bit [bit_start..bit_end Prelude.- 1]
        bits_indexed = Prelude.zip bits [0..191]
        token_strs_expected = Prelude.concatMap f bits_indexed
        f (Prelude.False, _) = []
        f (Prelude.True, nr) = [token_strs Prelude.!! nr]

happyActOffsets :: Happy_Data_Array.Array Prelude.Int Prelude.Int
happyActOffsets = Happy_Data_Array.listArray (0,629) ([-16,484,-49,1103,1388,1388,-45,1190,933,2430,1027,1123,50,1027,0,0,0,0,0,0,0,-53,0,0,0,0,0,0,0,0,1980,0,0,0,0,0,0,0,0,0,0,0,-53,0,1335,-53,2442,2442,0,-20,2050,0,0,2491,2503,0,0,2516,839,439,0,0,15,71,192,0,0,1963,0,0,0,3108,0,1568,0,211,211,0,0,0,0,0,233,243,248,1433,2925,1103,1018,769,1497,4,968,2950,0,1423,1423,214,214,1237,301,189,884,554,-34,630,2137,0,357,376,389,1669,2835,1167,582,0,314,-13,314,606,314,519,358,0,0,457,0,442,0,461,670,520,0,42,0,0,0,0,1308,1924,0,789,536,576,0,1571,0,566,104,0,210,0,263,590,0,602,283,124,0,307,0,2846,0,231,256,0,2067,2154,836,1581,1147,2224,2224,2224,2950,1103,2950,608,1170,617,0,2950,1756,2561,0,0,141,0,3125,0,3142,0,2876,0,0,0,2574,2417,299,0,0,607,0,649,654,652,0,1212,0,678,666,102,885,0,1423,1423,1732,683,701,0,98,38,0,222,1212,143,630,1167,2224,1500,1843,2224,2224,2224,0,0,0,0,0,1103,2574,1190,0,588,0,710,684,3183,709,930,1036,0,1089,725,0,2586,0,2635,0,2635,2635,2635,0,0,711,2635,711,0,745,0,-5,739,1027,0,765,0,0,834,844,0,3035,832,0,0,2635,0,2635,0,866,1147,0,1147,0,0,0,0,0,0,853,853,853,2224,2381,0,2472,0,2635,1843,881,2950,1103,889,2647,1103,1103,1103,0,1103,960,0,1103,1103,2950,1103,0,0,1103,0,1568,0,768,1568,0,1568,952,0,7,813,947,907,0,951,0,923,0,1103,1388,0,1388,0,0,0,2224,917,0,1045,0,2950,0,934,987,963,981,981,981,977,2224,2616,2760,2660,1843,0,2950,0,2950,0,2660,0,984,2950,1147,0,0,1343,1257,734,0,734,0,989,2705,2224,999,734,1075,0,1846,0,1109,1147,1846,1027,0,1058,1067,0,1065,734,0,3041,2895,0,0,114,1027,168,260,0,1451,1100,1119,2705,0,0,401,0,1363,0,0,0,1103,0,0,0,1124,0,0,2718,3100,2718,1843,-19,2224,1103,1127,0,1178,0,2950,1171,0,0,0,0,1147,0,2718,0,0,0,0,0,1180,0,1103,0,0,1180,1205,116,1209,1215,0,1222,610,316,918,1103,1103,1229,1229,0,0,0,1103,1229,1211,1214,1230,0,2718,3103,2718,1843,0,1242,0,1204,0,0,0,0,0,0,2718,0,3035,1243,670,1223,1231,-19,-19,1254,0,2718,0,2718,1103,1103,1285,646,407,1280,1103,1103,1283,1103,2950,2950,1103,0,1292,0,1276,0,0,0,1312,0,74,1284,0,2718,0,2718,1315,0,0,0,-19,1290,1295,1672,1268,0,1268,0,0,0,1306,0,2906,1103,3112,1303,446,515,0,0,0,1113,1303,1345,1103,1930,0,0,1310,2718,2730,2730,1302,0,0,2779,0,1347,1319,0,1349,1103,1349,1349,1103,1103,1357,1350,1350,0,0,2779,1321,670,0,1329,0,1103,1372,1372,1372,0,0,0,0,-19,1051,0,1372,0,965,0,0,0,1930,1340,1374,0,0,0
	])

happyGotoOffsets :: Happy_Data_Array.Array Prelude.Int Prelude.Int
happyGotoOffsets = Happy_Data_Array.listArray (0,629) ([1402,269,1403,1575,158,213,1377,1394,340,3179,1042,330,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1019,0,0,0,0,0,0,0,0,0,0,0,0,0,318,0,3331,2704,0,0,563,0,0,891,943,0,0,2443,767,692,0,0,0,0,0,0,0,1291,0,0,0,1371,0,69,0,1370,1391,0,0,0,0,0,0,0,0,110,-1,1438,668,604,3156,1070,727,33,0,415,2946,0,0,326,0,0,249,381,0,1122,0,0,0,0,0,198,447,510,-62,0,0,0,0,129,0,285,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,383,1397,0,16,0,0,0,463,0,0,0,0,1385,0,0,0,0,0,0,0,0,0,0,1213,0,0,0,0,743,0,418,349,1356,1236,1342,1399,85,1591,499,0,20,0,0,24,-26,3202,0,0,0,0,1405,0,1405,0,206,0,0,0,2587,3359,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,2957,2968,0,0,0,0,0,0,0,0,400,0,1129,1046,812,471,503,1627,1715,1744,0,0,0,0,0,2933,2877,1130,0,0,0,0,0,0,0,0,0,0,795,0,0,976,0,3377,0,3391,822,3405,0,0,0,3345,0,0,0,0,0,0,1049,0,0,0,0,0,0,0,0,0,0,0,3419,0,3433,0,3045,368,0,153,0,0,0,0,0,0,0,0,0,1023,542,0,294,0,3447,321,0,428,1607,0,3225,2762,1509,1662,0,1678,1694,0,1749,1765,1445,1781,0,0,1836,0,1351,0,1369,481,0,2702,0,0,1393,0,0,0,0,0,0,0,0,2777,385,0,393,0,0,0,1050,0,0,278,0,58,0,0,0,0,0,0,0,0,1179,788,513,3461,544,0,165,0,242,0,3475,0,0,379,-36,0,0,328,345,196,0,244,0,0,3248,1203,1823,156,1453,0,824,0,0,1086,857,5,0,0,0,0,1856,177,0,830,39,0,0,535,1099,0,0,0,1105,0,0,3271,0,0,0,0,411,0,0,0,1852,0,0,0,0,0,0,3489,579,3503,700,1376,1252,1868,0,0,0,0,660,0,0,0,0,0,413,0,3517,0,0,0,0,0,0,0,1923,0,0,0,0,0,0,0,0,0,0,0,0,1939,1955,0,0,0,0,0,2010,0,0,0,0,0,3531,705,3545,718,0,0,0,0,0,0,0,0,0,0,3559,0,0,0,37,0,0,1382,1383,0,0,3573,0,3587,2026,2042,0,0,0,0,2097,2113,0,2129,148,635,2184,0,0,0,0,0,0,0,0,0,0,0,0,3601,0,3615,0,0,0,0,1387,0,0,1143,986,0,1279,0,0,0,0,0,665,2200,732,1441,0,0,0,0,0,1207,1447,0,2216,-6,0,0,0,3629,3294,3317,0,0,0,3643,0,0,0,0,0,2271,0,0,2287,2303,0,0,0,0,0,3657,0,65,0,0,0,2358,0,0,0,0,0,0,0,1389,0,0,0,0,0,0,0,0,-22,0,0,0,0,0
	])

happyAdjustOffset :: Prelude.Int -> Prelude.Int
happyAdjustOffset = Prelude.id

happyDefActions :: Happy_Data_Array.Array Prelude.Int Prelude.Int
happyDefActions = Happy_Data_Array.listArray (0,629) ([0,0,0,0,0,0,0,0,-131,0,0,0,0,0,-315,-132,-134,-137,-307,-312,-314,0,-302,-313,-305,-306,-304,-303,-143,-144,0,-139,-138,-142,-140,-141,-135,-136,-145,-133,-308,-310,0,-309,0,0,0,0,-261,-254,-276,-278,-281,0,-282,-284,-285,0,0,0,-292,-130,-87,0,-129,-148,-152,0,-173,-159,-151,-174,-170,-171,-175,-177,-178,-179,-180,-181,-182,-183,0,0,0,0,0,0,0,0,0,0,0,0,-184,0,0,0,0,0,0,0,-108,0,0,-238,-110,-86,0,0,0,0,0,0,0,-240,0,0,0,0,0,0,0,-53,-68,0,-51,0,-67,0,0,0,-50,-17,-37,-47,-46,-48,0,0,-40,0,-304,0,-52,0,-35,0,0,-34,0,-252,0,0,-247,0,0,-236,-238,0,-239,0,-241,0,0,-244,0,-307,0,0,0,0,0,0,0,0,0,0,-115,0,-112,0,0,0,-122,-124,0,-128,-174,-169,-174,-168,0,-317,-192,-318,0,0,0,-199,-201,-202,-194,-212,0,-208,-209,-120,-188,-184,0,0,0,-187,-140,-141,-216,-217,0,-190,0,0,-162,0,-108,0,-238,0,0,0,0,0,0,0,-197,-198,-196,-176,-172,0,0,-88,-269,0,-300,0,-267,-258,0,0,0,-288,0,0,-293,-280,-282,0,-279,0,0,0,-262,-260,-256,0,-255,-311,0,-13,0,0,0,-316,-257,-275,-277,0,0,-294,-295,0,-290,-289,0,-287,0,-283,0,0,-291,0,-259,-89,-157,-158,-150,-146,-103,-101,-102,0,0,-273,0,-271,0,0,0,0,0,0,0,0,0,0,-191,0,0,-228,0,0,0,0,-186,-185,0,-193,0,-121,0,0,-189,0,0,-195,0,0,0,-307,-325,0,-320,0,-113,0,0,-127,0,-71,-109,-110,0,-119,-116,0,-118,0,-123,-237,-72,0,-85,-83,-84,0,0,0,0,0,0,-246,0,-245,0,-243,0,-242,-111,0,0,-248,-149,0,0,0,-33,0,-36,0,0,0,-69,0,-23,-21,0,-45,0,0,0,0,-41,-304,0,-14,-69,0,-49,0,0,-42,-20,-30,0,0,0,-61,0,0,0,0,-38,-39,0,-155,0,-153,-253,-251,0,-235,-249,-250,0,-77,-274,0,0,0,0,0,0,0,-114,-74,-75,-70,0,0,-125,-126,-161,-319,0,-321,0,-323,-322,-200,-203,-212,-206,-210,0,-213,-214,-207,-204,-204,-215,-230,-232,0,0,-221,-218,0,0,-205,-164,-163,-160,-94,0,-90,0,-111,0,-95,0,0,0,0,-270,-267,-301,-268,-299,-265,-264,-263,-297,-298,0,-286,-296,0,0,0,0,0,0,0,-98,0,-96,0,0,0,-91,0,-220,0,0,0,0,0,0,0,0,-229,-211,-324,0,-326,-111,-117,-76,-147,0,0,-80,0,-78,0,-73,-154,-156,-56,0,0,0,0,-69,-59,-69,-54,-22,-19,0,-29,0,0,0,0,0,0,-60,-55,-104,0,0,-44,0,-28,-63,-62,0,0,0,0,-58,-79,-81,0,-272,-219,-231,-233,-234,0,-224,-222,0,0,0,-93,-92,-97,-99,0,-266,0,-15,0,-100,0,-223,-225,-227,-82,-57,-64,-66,0,0,-27,-43,-105,0,-106,-107,-24,0,-65,-226,-16,-26
	])

happyCheck :: Happy_Data_Array.Array Prelude.Int Prelude.Int
happyCheck = Happy_Data_Array.listArray (0,3774) ([-1,7,1,29,20,1,1,29,1,22,59,2,3,32,59,77,78,22,52,72,4,12,13,29,15,16,17,28,29,20,21,27,23,67,27,97,56,28,29,2,3,77,30,59,63,33,34,52,67,12,13,31,15,16,17,51,32,20,21,72,23,97,47,30,26,28,29,2,3,30,20,97,98,74,75,97,98,12,13,41,15,16,17,74,75,20,21,75,23,47,32,97,98,28,29,75,97,98,97,75,99,100,97,61,99,100,97,98,75,97,98,74,75,97,75,99,100,97,98,45,22,97,98,25,22,11,57,58,59,55,97,98,3,75,97,98,97,98,22,74,75,12,13,72,15,16,17,45,46,20,21,47,23,37,38,97,98,28,29,3,75,47,97,98,60,61,97,98,12,13,101,15,16,17,60,61,20,21,54,23,3,23,97,98,28,29,28,29,47,12,13,67,15,16,17,52,86,20,21,3,23,60,61,74,75,28,29,97,98,13,67,15,16,17,22,47,20,21,7,23,72,73,74,75,28,29,97,98,60,61,74,75,74,75,1,46,23,84,73,74,75,28,29,54,1,97,98,3,35,1,97,74,75,97,98,97,98,13,48,15,16,17,97,98,20,21,35,23,46,59,74,75,28,29,97,98,54,46,9,30,11,75,33,14,86,16,72,74,75,20,21,35,23,97,98,97,98,28,29,14,22,16,46,97,98,20,21,47,23,46,97,98,49,28,29,73,74,75,74,75,60,61,44,45,75,47,48,49,45,46,52,53,54,55,56,57,58,59,22,97,98,97,98,74,75,29,97,98,47,23,51,23,45,46,28,29,28,29,1,74,75,62,36,35,24,25,97,98,23,39,40,41,42,28,29,97,98,1,38,101,86,36,97,98,44,45,72,47,48,49,1,97,52,53,54,55,56,57,58,59,74,75,74,75,23,47,23,86,23,28,29,28,29,28,29,97,23,99,97,74,75,28,29,97,98,97,98,97,98,22,30,101,102,33,23,86,29,97,98,28,29,101,97,98,5,3,97,98,47,10,11,12,73,74,75,74,75,74,75,74,75,60,61,95,49,97,27,74,75,54,55,56,57,58,59,75,97,98,97,98,97,98,97,98,0,74,75,30,49,5,97,98,8,47,10,11,12,97,98,15,16,17,18,75,86,87,60,61,97,98,97,27,97,98,30,97,101,104,34,0,73,74,75,76,5,97,98,8,44,10,11,12,48,72,15,16,17,18,57,58,59,6,58,8,97,98,27,66,67,30,40,41,42,34,0,71,72,86,87,5,97,98,47,44,10,11,12,48,97,15,16,17,18,74,75,60,61,58,97,98,60,27,101,73,74,75,76,5,34,86,71,72,10,11,12,59,97,98,44,86,97,98,48,40,41,42,0,97,98,27,97,5,58,47,8,9,10,11,12,13,14,15,16,17,18,19,72,21,86,87,86,49,22,27,46,59,30,49,28,97,34,97,52,39,40,41,42,45,44,45,44,47,48,49,48,47,52,53,54,55,56,57,58,59,58,86,60,63,22,52,0,64,42,43,28,5,97,71,8,9,10,11,12,13,14,15,16,17,18,19,41,21,62,63,64,65,66,27,46,69,30,97,98,49,34,101,71,72,73,74,75,45,44,45,44,47,48,49,48,41,52,53,54,55,56,57,58,59,58,46,60,63,97,98,0,75,35,69,54,5,75,71,8,9,10,11,12,13,14,15,16,17,18,19,45,21,46,97,98,49,35,27,97,98,30,97,98,56,34,101,1,2,3,4,5,6,84,85,44,10,11,12,48,40,41,42,86,95,96,97,45,86,58,24,5,6,27,97,59,10,11,12,97,34,86,71,39,40,41,42,21,42,43,44,45,97,27,48,86,50,52,56,53,55,97,98,57,58,101,97,103,62,63,64,65,66,67,68,69,70,1,5,53,4,5,6,10,11,12,10,11,12,40,41,42,88,89,90,91,46,93,94,49,27,97,98,27,1,101,35,4,5,6,34,86,87,10,11,12,35,44,42,43,44,45,97,54,48,52,5,95,96,97,27,10,11,12,58,32,46,34,62,63,64,65,66,67,68,69,70,44,27,90,91,48,93,86,87,34,97,98,97,98,101,58,101,45,97,44,63,45,46,48,67,1,2,3,4,5,6,22,52,58,10,11,12,28,29,15,16,17,18,68,1,97,98,23,24,101,52,27,1,2,3,4,5,6,34,45,1,10,11,12,5,6,45,46,44,10,11,12,48,91,50,24,68,53,27,97,98,57,58,101,46,34,27,49,46,65,66,49,67,42,43,44,19,20,21,48,22,50,46,44,53,49,52,48,57,58,1,2,3,4,5,6,65,66,46,10,11,12,54,5,6,91,92,52,10,11,12,97,98,24,54,101,27,1,2,3,4,5,6,34,35,27,10,11,12,39,40,41,42,44,40,41,42,48,91,50,24,71,53,27,97,98,57,58,101,33,34,53,45,46,65,66,10,40,41,42,44,40,41,42,48,5,50,45,46,53,10,11,12,57,58,1,2,3,4,5,6,65,66,3,10,11,12,27,59,5,73,74,75,76,10,11,12,59,24,5,6,27,61,62,10,11,12,71,34,49,97,27,99,100,97,98,45,97,44,99,100,27,48,5,50,24,25,53,10,11,12,57,58,49,41,42,42,43,44,65,66,41,42,5,54,27,5,52,10,11,12,10,11,12,97,98,62,63,64,65,66,67,68,69,70,27,68,97,27,99,100,22,34,97,98,34,15,16,17,18,42,43,44,45,23,44,48,45,5,48,40,41,42,10,11,12,58,46,22,58,62,63,64,65,66,67,68,69,0,68,27,97,98,5,40,41,42,34,10,11,12,41,22,15,16,17,18,44,0,36,55,48,46,5,52,27,22,52,10,11,12,58,34,15,16,17,18,40,41,42,43,68,44,52,60,27,48,73,74,75,76,59,34,40,41,42,58,54,60,19,20,21,44,95,96,97,48,52,22,0,29,97,98,29,5,22,58,8,60,10,11,12,13,14,15,16,17,18,19,52,21,39,40,41,42,22,27,52,22,30,71,5,6,34,0,54,10,11,12,5,54,44,48,44,10,11,12,48,55,15,16,17,18,27,0,54,46,58,22,5,22,27,22,22,10,11,12,55,34,15,16,17,18,40,41,42,43,29,44,0,60,27,48,49,5,22,55,22,34,10,11,12,58,0,15,16,17,18,44,57,58,59,48,49,10,37,27,65,66,67,25,49,58,34,26,1,2,3,4,5,6,60,46,44,10,11,12,48,68,5,40,41,42,43,10,11,12,58,24,97,98,27,60,101,97,49,62,5,34,5,83,27,10,11,12,31,83,83,44,27,18,83,48,83,50,27,-1,53,44,27,-1,57,58,44,45,-1,47,48,49,50,51,52,53,54,55,56,57,58,59,1,2,3,4,5,6,-1,5,-1,10,11,12,10,11,12,-1,-1,70,71,72,73,74,75,-1,-1,-1,27,-1,-1,27,-1,-1,-1,34,-1,-1,-1,97,98,-1,-1,101,-1,44,97,98,44,48,49,50,-1,-1,53,-1,52,44,45,58,47,48,49,-1,51,52,53,54,55,56,57,58,59,1,2,3,4,5,6,-1,5,-1,10,11,12,10,11,12,-1,-1,5,-1,-1,18,-1,10,11,12,-1,27,-1,-1,27,-1,-1,-1,34,-1,-1,-1,97,98,27,-1,101,-1,44,-1,-1,44,48,-1,50,44,45,53,47,48,49,44,58,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,40,41,42,43,-1,97,98,5,-1,101,5,-1,10,11,12,10,11,12,-1,-1,-1,97,98,-1,-1,101,-1,-1,-1,27,-1,-1,27,31,-1,-1,31,97,98,44,45,101,47,48,49,-1,44,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,22,40,41,42,43,97,98,5,-1,101,-1,-1,10,11,12,37,38,39,40,41,-1,97,98,-1,46,101,-1,-1,-1,27,40,41,42,43,-1,-1,-1,97,98,44,45,101,47,48,49,-1,44,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,18,19,20,21,-1,97,98,5,-1,101,5,6,10,11,12,10,11,12,-1,-1,-1,97,98,-1,-1,101,-1,-1,-1,27,-1,-1,27,18,19,20,21,97,98,44,45,101,47,48,49,-1,44,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,-1,-1,-1,-1,8,97,98,5,-1,101,14,-1,10,11,12,19,-1,21,-1,-1,-1,97,98,-1,-1,101,30,-1,-1,27,-1,-1,-1,-1,-1,-1,-1,97,98,44,45,101,47,48,49,-1,44,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,42,43,52,53,54,55,56,57,58,59,-1,-1,54,-1,-1,97,98,42,43,101,62,63,64,65,66,67,68,69,70,-1,-1,97,98,-1,-1,101,-1,62,63,64,65,66,67,68,69,70,-1,97,98,44,45,101,47,48,49,-1,-1,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,42,43,52,53,54,55,56,57,58,59,-1,-1,-1,55,-1,97,98,42,43,101,62,63,64,65,66,67,68,69,-1,-1,-1,97,98,-1,-1,101,-1,62,63,64,65,66,67,68,69,-1,-1,97,98,44,45,101,47,48,49,-1,-1,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,42,43,52,53,54,55,56,57,58,59,52,-1,-1,-1,-1,97,98,42,43,101,62,63,64,65,66,67,-1,69,-1,-1,-1,97,98,-1,-1,101,-1,62,63,64,65,66,67,68,69,-1,-1,97,98,44,45,101,47,48,49,-1,-1,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,42,43,52,53,54,55,56,57,58,59,-1,-1,-1,-1,-1,97,98,-1,-1,101,62,63,64,65,66,67,68,69,-1,-1,-1,97,98,-1,-1,101,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,97,98,44,45,101,47,48,49,-1,-1,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,44,45,-1,47,48,49,-1,-1,52,53,54,55,56,57,58,59,-1,-1,-1,-1,-1,97,98,-1,-1,101,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,97,98,5,-1,101,-1,-1,10,11,12,-1,-1,-1,-1,-1,-1,97,98,44,45,101,47,48,49,27,-1,52,53,54,55,56,57,58,59,1,-1,-1,4,5,6,-1,44,-1,10,11,12,-1,1,-1,52,4,5,6,-1,-1,-1,10,11,12,1,27,-1,4,5,6,-1,-1,34,10,11,12,97,98,27,-1,101,-1,44,-1,-1,34,48,49,-1,-1,27,-1,-1,-1,-1,44,58,34,5,48,-1,-1,-1,10,11,12,-1,44,-1,58,-1,48,-1,1,-1,-1,4,5,6,-1,27,58,10,11,12,1,-1,-1,4,5,6,-1,-1,-1,10,11,12,44,1,27,-1,4,5,6,-1,52,34,10,11,12,-1,27,88,89,90,91,44,93,34,-1,48,97,98,-1,27,101,-1,-1,44,-1,58,34,48,-1,-1,-1,-1,-1,-1,-1,-1,44,58,1,-1,48,4,5,6,-1,-1,-1,10,11,12,58,1,-1,-1,4,5,6,-1,-1,-1,10,11,12,1,27,-1,4,5,6,-1,-1,34,10,11,12,-1,-1,27,-1,-1,-1,44,-1,-1,34,48,-1,-1,-1,27,-1,-1,-1,-1,44,58,34,5,48,-1,-1,-1,10,11,12,-1,44,-1,58,-1,48,-1,1,-1,-1,4,5,6,-1,27,58,10,11,12,1,-1,-1,4,5,6,-1,-1,-1,10,11,12,44,1,27,-1,4,5,6,-1,52,34,10,11,12,-1,27,88,89,90,91,44,93,34,-1,48,97,98,-1,27,101,-1,-1,44,-1,58,34,48,-1,-1,-1,-1,-1,-1,-1,-1,44,58,1,-1,48,4,5,6,-1,-1,-1,10,11,12,58,1,-1,-1,4,5,6,-1,-1,-1,10,11,12,1,27,-1,4,5,6,-1,-1,34,10,11,12,-1,-1,27,-1,-1,-1,44,-1,-1,34,48,-1,-1,-1,27,-1,57,58,59,44,58,34,5,48,65,66,67,10,11,12,-1,44,-1,58,-1,48,-1,1,-1,-1,4,5,6,82,27,58,10,11,12,88,89,90,91,-1,93,-1,97,98,97,98,101,44,101,27,45,-1,47,48,49,52,34,52,53,54,55,56,57,58,59,45,44,47,48,49,48,-1,52,53,54,55,56,57,58,59,58,-1,-1,5,-1,-1,-1,-1,10,11,12,-1,-1,-1,5,-1,-1,-1,-1,10,11,12,97,98,-1,27,101,-1,-1,-1,-1,-1,34,35,-1,-1,27,97,98,-1,-1,101,44,34,5,-1,48,-1,-1,10,11,12,-1,44,45,-1,58,48,-1,-1,-1,-1,-1,5,-1,-1,27,58,10,11,12,-1,-1,34,5,-1,-1,-1,-1,10,11,12,-1,44,-1,27,-1,48,-1,-1,-1,-1,34,5,55,-1,27,58,10,11,12,-1,44,34,-1,-1,48,-1,-1,-1,52,-1,-1,44,-1,27,58,48,5,-1,-1,52,34,10,11,12,-1,58,88,89,90,91,44,93,-1,-1,48,97,98,-1,27,101,-1,-1,-1,49,58,34,52,53,54,55,56,57,58,59,-1,44,49,-1,-1,48,-1,54,55,56,57,58,59,49,-1,58,-1,-1,54,55,56,57,58,59,49,-1,-1,-1,-1,54,55,56,57,58,59,-1,-1,97,98,-1,-1,101,-1,-1,-1,-1,-1,-1,-1,-1,97,98,-1,5,101,-1,-1,-1,10,11,12,97,98,-1,22,101,-1,25,26,-1,28,29,97,98,-1,27,101,35,36,37,38,39,40,41,42,43,-1,45,46,47,-1,49,44,-1,-1,-1,54,55,56,-1,52,-1,60,61,62,63,64,65,66,67,68,69,5,-1,72,5,-1,10,11,12,10,11,12,-1,5,-1,-1,-1,-1,10,11,12,-1,-1,27,83,-1,27,-1,24,88,89,90,91,-1,93,27,-1,-1,97,98,44,-1,101,44,-1,24,42,43,52,-1,-1,52,44,-1,-1,-1,-1,-1,54,-1,52,57,24,42,43,-1,62,63,64,65,66,67,68,69,70,54,-1,-1,57,-1,42,43,-1,62,63,64,65,66,67,68,69,70,54,-1,-1,57,-1,-1,-1,-1,62,63,64,65,66,67,68,69,70,57,58,59,-1,-1,-1,-1,64,65,66,67,-1,42,43,-1,-1,-1,47,-1,-1,-1,-1,-1,-1,54,55,56,-1,-1,-1,60,61,62,63,64,65,66,67,68,69,97,98,72,-1,101,79,80,81,82,-1,-1,-1,-1,-1,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,79,80,81,82,-1,-1,-1,-1,-1,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,79,80,81,82,-1,-1,-1,-1,-1,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,79,80,81,82,-1,-1,-1,-1,-1,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,79,80,81,82,-1,-1,-1,-1,-1,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,79,80,81,82,-1,-1,-1,-1,-1,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,79,80,81,82,-1,-1,-1,-1,-1,88,89,90,91,-1,93,-1,81,82,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,82,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,94,-1,-1,97,98,-1,-1,101,-1,-1,104,105,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,88,89,90,91,-1,93,-1,-1,-1,97,98,-1,-1,101,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
	])

happyTable :: Happy_Data_Array.Array Prelude.Int Prelude.Int
happyTable = Happy_Data_Array.listArray (0,3774) ([0,616,269,350,14,201,408,628,201,151,120,131,132,500,100,151,152,272,176,-1,394,133,134,617,135,136,137,223,224,138,139,202,140,177,202,153,263,101,102,509,132,428,178,131,501,329,330,273,502,133,134,356,135,136,137,203,353,138,139,-1,140,153,242,192,314,101,102,605,132,562,14,18,351,225,226,18,351,133,134,315,135,136,137,104,105,138,139,180,140,386,444,18,351,101,102,344,18,106,40,354,41,270,40,388,41,270,18,106,180,18,160,104,105,40,180,41,395,18,160,587,151,18,160,316,151,562,237,75,76,512,18,160,132,354,18,106,18,160,151,104,105,148,134,-1,135,136,137,326,327,138,139,386,140,531,532,18,160,101,102,132,361,-25,18,106,387,388,18,19,415,134,77,135,136,137,-25,-25,138,139,377,140,132,116,18,160,101,102,101,102,347,566,134,177,135,136,137,311,228,138,139,132,140,348,349,104,105,101,102,167,229,423,177,135,136,137,151,386,138,139,236,140,589,473,157,158,101,102,18,106,558,388,104,105,104,105,234,183,100,494,433,157,158,101,102,184,233,18,160,132,103,232,495,104,105,18,106,18,106,422,384,135,136,137,18,160,138,139,374,140,183,385,104,105,101,102,18,106,313,375,120,178,121,344,179,122,166,123,-1,104,105,124,125,372,126,18,106,167,168,101,102,147,445,123,373,18,160,124,125,555,126,381,18,106,382,101,102,432,157,158,104,105,556,557,446,65,180,66,67,68,378,375,69,70,71,72,73,74,75,76,151,18,160,18,106,104,105,526,18,160,185,185,336,100,376,373,101,102,101,102,174,104,105,337,186,426,61,62,18,106,185,14,15,16,17,101,102,18,19,173,63,77,436,424,18,106,64,65,-1,66,67,68,172,305,69,70,71,72,73,74,75,76,104,105,104,105,177,147,402,488,451,101,102,101,102,101,102,40,450,267,305,104,105,101,102,18,106,18,106,18,19,151,178,20,21,311,177,366,596,18,19,101,102,77,18,106,23,145,167,367,347,25,26,27,429,157,158,104,105,104,105,104,105,549,349,496,68,281,28,104,105,190,191,73,74,75,76,180,18,160,18,106,18,106,18,106,108,104,105,146,248,23,18,106,128,386,25,26,27,18,160,109,110,111,112,486,303,368,570,388,18,106,534,28,18,19,-69,305,77,535,113,108,163,157,158,164,23,18,160,128,114,25,26,27,115,-1,109,110,111,112,461,75,76,559,116,560,18,160,28,463,207,-69,155,16,17,113,108,129,-32,303,304,23,18,389,555,114,25,26,27,115,305,109,110,111,112,359,158,569,557,116,18,19,406,28,77,156,157,158,159,23,113,301,129,-31,25,26,27,394,18,160,114,436,167,302,115,260,16,17,108,18,160,28,305,23,116,389,-69,142,25,26,143,144,-69,109,110,111,112,-69,-1,-69,303,491,434,155,151,28,292,393,-69,293,527,305,113,305,380,210,15,16,17,379,211,65,114,66,67,68,115,359,69,70,71,72,73,74,75,76,116,436,150,212,151,356,108,335,29,30,597,23,305,129,-69,142,25,26,143,144,-69,109,110,111,112,-69,334,-69,32,33,34,35,36,28,332,39,-69,18,19,333,113,77,588,472,473,157,158,328,216,65,114,66,67,68,115,329,69,70,71,72,73,74,75,76,116,318,-18,217,18,160,108,537,317,218,289,23,344,129,-69,142,25,26,143,144,-69,109,110,111,112,-69,288,-69,290,18,160,291,281,28,18,160,-69,18,19,263,113,77,79,80,81,82,23,24,242,243,114,25,26,27,115,370,16,17,541,244,245,246,274,436,116,88,23,44,28,305,509,25,26,27,305,89,513,129,248,15,16,17,397,29,30,90,214,305,28,91,436,92,466,263,93,467,18,19,94,95,193,305,194,32,33,34,215,216,37,38,39,40,56,23,45,57,23,24,25,26,27,25,26,27,307,16,17,249,50,51,52,287,53,250,459,28,18,19,28,56,54,507,57,23,24,58,303,438,25,26,27,506,171,29,30,59,252,305,505,253,370,23,244,245,281,28,25,26,27,61,500,443,58,32,33,34,35,36,37,38,39,40,59,28,276,52,253,53,303,564,113,18,19,18,19,54,61,412,488,305,162,501,325,318,115,502,79,80,81,82,23,24,151,485,116,25,26,27,524,525,83,84,85,86,182,461,18,19,87,88,409,457,28,79,80,81,82,23,24,89,454,196,25,26,27,23,24,286,287,90,25,26,27,91,258,92,88,449,93,28,18,19,94,95,256,285,89,28,458,455,96,97,456,177,478,479,90,577,124,418,91,151,92,290,197,93,623,444,198,94,95,79,80,81,82,23,24,96,97,443,25,26,27,442,23,44,254,255,431,25,26,27,18,19,88,422,256,28,79,80,81,82,23,24,89,220,28,25,26,27,268,15,16,17,90,493,16,17,91,279,92,88,129,93,28,18,19,94,95,256,448,89,45,284,285,96,97,415,308,16,17,90,449,16,17,91,23,92,624,625,93,25,26,27,94,95,79,80,81,82,23,24,96,97,412,25,26,27,28,408,23,156,157,158,159,25,26,27,407,88,23,24,28,198,199,25,26,27,129,89,283,40,28,41,42,18,160,552,40,90,41,507,28,91,23,92,293,62,93,25,26,27,94,95,622,174,17,29,30,31,96,97,309,17,23,551,28,23,546,25,26,27,25,26,27,18,410,32,33,34,35,36,37,38,39,40,28,449,40,28,41,558,151,113,18,552,113,83,84,85,86,29,30,162,163,87,162,115,537,23,115,440,16,17,25,26,27,116,332,151,116,32,33,34,35,36,37,38,39,108,358,28,18,578,23,419,16,17,113,25,26,27,530,151,109,110,111,112,162,108,528,512,115,529,23,520,28,511,519,25,26,27,116,113,109,110,111,112,297,16,17,364,182,114,518,605,28,115,156,157,158,159,604,113,539,16,17,116,513,188,576,124,418,114,244,620,281,115,602,151,108,595,18,160,592,23,151,116,-68,426,25,26,404,405,-68,109,110,111,112,-68,457,-68,239,15,16,17,151,28,586,151,-68,129,23,44,113,108,582,25,26,27,23,581,576,572,114,25,26,27,115,512,109,110,111,112,28,108,616,529,116,151,23,151,28,151,151,25,26,27,512,113,109,110,111,112,297,16,17,363,608,114,108,628,28,115,428,23,151,512,151,113,25,26,27,116,129,109,110,111,112,114,461,75,76,115,548,118,98,28,467,206,207,97,238,116,113,397,79,80,81,82,23,24,236,382,114,25,26,27,115,464,23,297,16,17,362,25,26,27,116,88,18,19,28,234,77,365,238,459,23,89,413,540,28,25,26,27,231,602,497,90,570,554,582,91,625,92,619,0,93,171,28,0,94,95,220,65,0,66,67,68,221,222,69,70,71,72,73,74,75,76,79,80,81,82,23,24,0,23,0,25,26,27,25,26,27,0,0,470,471,472,473,157,158,0,0,0,28,0,0,28,0,0,0,89,0,0,0,18,19,0,0,77,0,90,18,160,171,91,209,92,0,0,93,0,307,220,65,210,66,67,68,0,481,69,70,71,72,73,74,75,76,79,80,81,82,23,24,0,23,0,25,26,27,25,26,27,0,0,23,0,0,391,0,25,26,27,0,28,0,0,28,0,0,0,89,0,0,0,18,19,28,0,77,0,90,0,0,392,91,0,92,117,65,93,66,67,68,171,95,69,70,71,72,73,74,75,76,360,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,485,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,297,16,17,300,0,18,19,23,0,77,23,0,25,26,27,25,26,27,0,0,0,18,19,0,0,77,0,0,0,28,0,0,28,170,0,0,580,18,19,480,65,77,66,67,68,0,171,69,70,71,72,73,74,75,76,479,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,476,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,151,297,16,17,299,18,19,23,0,77,0,0,25,26,27,319,320,321,322,323,0,18,19,0,324,77,0,0,0,28,297,16,17,298,0,0,0,18,19,475,65,77,66,67,68,0,353,69,70,71,72,73,74,75,76,474,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,469,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,416,417,124,418,0,18,19,23,0,77,23,24,25,26,27,25,26,27,0,0,0,18,19,0,0,77,0,0,0,28,0,0,28,567,417,124,418,18,19,468,65,77,66,67,68,0,171,69,70,71,72,73,74,75,76,546,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,538,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,0,0,0,0,399,18,19,23,0,77,400,0,25,26,27,401,0,402,0,0,0,18,19,0,0,77,146,0,0,28,0,0,0,0,0,0,0,18,19,532,65,77,66,67,68,0,353,69,70,71,72,73,74,75,76,522,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,521,65,0,66,67,68,29,30,69,70,71,72,73,74,75,76,0,0,241,0,0,18,19,29,30,77,32,33,34,35,36,37,38,39,40,0,0,18,19,0,0,77,0,32,33,34,35,36,37,38,39,40,0,18,19,520,65,77,66,67,68,0,0,69,70,71,72,73,74,75,76,598,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,597,65,0,66,67,68,29,30,69,70,71,72,73,74,75,76,0,0,0,262,0,18,19,29,30,77,32,33,34,35,36,37,38,39,0,0,0,18,19,0,0,77,0,32,33,34,35,36,37,38,39,0,0,18,19,593,65,77,66,67,68,0,0,69,70,71,72,73,74,75,76,592,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,590,65,0,66,67,68,-239,-239,69,70,71,72,73,74,75,76,-239,0,0,0,0,18,19,-271,-271,77,-239,-239,-239,-239,-239,-239,0,-239,0,0,0,18,19,0,0,77,0,-271,-271,-271,-271,-271,-271,-271,-271,0,0,18,19,587,65,77,66,67,68,0,0,69,70,71,72,73,74,75,76,573,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,618,65,0,66,67,68,29,30,69,70,71,72,73,74,75,76,0,0,0,0,0,18,19,0,0,77,32,33,34,35,36,37,38,39,0,0,0,18,19,0,0,77,0,0,0,0,0,0,0,0,0,0,0,18,19,610,65,77,66,67,68,0,0,69,70,71,72,73,74,75,76,609,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,608,65,0,66,67,68,0,0,69,70,71,72,73,74,75,76,0,0,0,0,0,18,19,0,0,77,0,0,0,0,0,0,0,0,0,0,0,18,19,23,0,77,0,0,25,26,27,0,0,0,0,0,0,18,19,626,65,77,66,67,68,28,0,69,70,71,72,73,74,75,76,56,0,0,57,23,24,0,171,0,25,26,27,0,56,0,493,57,23,24,0,0,0,25,26,27,56,28,0,57,23,24,0,0,58,25,26,27,18,19,28,0,77,0,59,0,0,58,253,343,0,0,28,0,0,0,0,59,61,58,23,60,0,0,0,25,26,27,0,59,0,61,0,253,0,56,0,0,57,23,24,0,28,61,25,26,27,56,0,0,57,23,24,0,0,0,25,26,27,171,56,28,0,57,23,24,0,491,260,25,26,27,0,28,253,50,51,52,59,53,258,0,253,18,19,0,28,54,0,0,59,0,61,58,253,0,0,0,0,0,0,0,0,59,61,56,0,253,57,23,24,0,0,0,25,26,27,61,56,0,0,57,23,24,0,0,0,25,26,27,56,28,0,57,23,24,0,0,58,25,26,27,0,0,28,0,0,0,59,0,0,58,60,0,0,0,28,0,0,0,0,59,61,258,23,253,0,0,0,25,26,27,0,59,0,61,0,253,0,56,0,0,57,23,24,0,28,61,25,26,27,56,0,0,57,23,24,0,0,0,25,26,27,171,56,28,0,57,23,24,0,440,58,25,26,27,0,28,343,50,51,52,59,53,58,0,253,18,19,0,28,54,0,0,59,0,61,58,60,0,0,0,0,0,0,0,0,59,61,56,0,253,57,23,24,0,0,0,25,26,27,61,56,0,0,57,23,24,0,0,0,25,26,27,56,28,0,57,23,24,0,0,58,25,26,27,0,0,28,0,0,0,59,0,0,58,60,0,0,0,28,0,461,75,76,59,61,58,23,253,462,206,207,25,26,27,0,59,0,61,0,60,0,56,0,0,57,23,24,263,28,61,25,26,27,264,50,51,52,0,53,0,18,19,18,19,77,171,54,28,482,0,66,67,68,438,58,69,70,71,72,73,74,75,76,452,59,66,67,68,253,0,69,70,71,72,73,74,75,76,61,0,0,23,0,0,0,0,25,26,27,0,0,0,23,0,0,0,0,25,26,27,18,19,0,28,77,0,0,0,0,0,113,166,0,0,28,18,19,0,0,77,162,113,23,0,115,0,0,25,26,27,0,162,163,0,116,115,0,0,0,0,0,23,0,0,28,116,25,26,27,0,0,113,23,0,0,0,0,25,26,27,0,162,0,28,0,115,0,0,0,0,113,23,346,0,28,116,25,26,27,0,162,113,0,0,115,0,0,0,564,0,0,162,0,28,116,115,23,0,0,575,113,25,26,27,0,116,294,50,51,52,228,53,0,0,115,18,19,0,28,54,0,0,0,68,116,113,295,296,71,72,73,74,75,76,0,162,68,0,0,115,0,188,189,73,74,75,76,68,0,116,0,0,190,191,73,74,75,76,68,0,0,0,0,188,189,73,74,75,76,0,0,18,19,0,0,77,0,0,0,0,0,0,0,0,18,19,0,23,77,0,0,0,25,26,27,18,19,0,-286,77,0,-286,-286,0,-286,-286,18,19,0,28,77,-286,-286,-286,-286,-286,-286,-286,-286,-286,0,-286,-286,-286,0,-286,171,0,0,0,-286,-286,-286,0,566,0,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,23,0,-286,23,0,25,26,27,25,26,27,0,23,0,0,0,0,25,26,27,0,0,28,497,0,28,0,88,498,50,51,52,0,53,28,0,0,18,19,171,0,54,171,0,88,-167,-167,544,0,0,516,171,0,0,0,0,0,-167,0,573,94,88,-166,-166,0,-167,-167,-167,-167,-167,-167,-167,-167,-167,-166,0,0,94,0,-165,-165,0,-166,-166,-166,-166,-166,-166,-166,-166,-166,-165,0,0,94,0,0,0,0,-165,-165,-165,-165,-165,-165,-165,-165,-165,203,75,76,0,0,0,0,204,205,206,207,0,-290,-290,0,0,0,-290,0,0,0,0,0,0,-290,-290,-290,0,0,0,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,18,19,-290,0,77,45,46,47,48,0,0,0,0,0,49,50,51,52,0,53,0,0,0,18,19,0,0,54,349,46,47,48,0,0,0,0,0,49,50,51,52,0,53,0,0,0,18,19,0,0,54,483,46,47,48,0,0,0,0,0,49,50,51,52,0,53,0,0,0,18,19,0,0,54,420,46,47,48,0,0,0,0,0,49,50,51,52,0,53,0,0,0,18,19,0,0,54,549,46,47,48,0,0,0,0,0,49,50,51,52,0,53,0,0,0,18,19,0,0,54,613,46,47,48,0,0,0,0,0,49,50,51,52,0,53,0,0,0,18,19,0,0,54,612,46,47,48,0,0,0,0,0,49,50,51,52,0,53,0,265,48,18,19,0,0,54,266,50,51,52,0,53,0,0,263,18,19,0,0,54,274,50,51,52,0,53,0,0,0,18,19,0,0,54,337,50,51,52,0,53,338,0,0,339,19,0,0,54,0,0,340,341,278,50,51,52,0,53,0,0,0,18,19,0,0,54,277,50,51,52,0,53,0,0,0,18,19,0,0,54,275,50,51,52,0,53,0,0,0,18,19,0,0,54,503,50,51,52,0,53,0,0,0,18,19,0,0,54,502,50,51,52,0,53,0,0,0,18,19,0,0,54,489,50,51,52,0,53,0,0,0,18,19,0,0,54,435,50,51,52,0,53,0,0,0,18,19,0,0,54,431,50,51,52,0,53,0,0,0,18,19,0,0,54,544,50,51,52,0,53,0,0,0,18,19,0,0,54,542,50,51,52,0,53,0,0,0,18,19,0,0,54,533,50,51,52,0,53,0,0,0,18,19,0,0,54,516,50,51,52,0,53,0,0,0,18,19,0,0,54,514,50,51,52,0,53,0,0,0,18,19,0,0,54,498,50,51,52,0,53,0,0,0,18,19,0,0,54,600,50,51,52,0,53,0,0,0,18,19,0,0,54,599,50,51,52,0,53,0,0,0,18,19,0,0,54,584,50,51,52,0,53,0,0,0,18,19,0,0,54,583,50,51,52,0,53,0,0,0,18,19,0,0,54,614,50,51,52,0,53,0,0,0,18,19,0,0,54,611,50,51,52,0,53,0,0,0,18,19,0,0,54,606,50,51,52,0,53,0,0,0,18,19,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	])

happyReduceArr = Happy_Data_Array.array (12, 325) [
	(12 , happyReduce_12),
	(13 , happyReduce_13),
	(14 , happyReduce_14),
	(15 , happyReduce_15),
	(16 , happyReduce_16),
	(17 , happyReduce_17),
	(18 , happyReduce_18),
	(19 , happyReduce_19),
	(20 , happyReduce_20),
	(21 , happyReduce_21),
	(22 , happyReduce_22),
	(23 , happyReduce_23),
	(24 , happyReduce_24),
	(25 , happyReduce_25),
	(26 , happyReduce_26),
	(27 , happyReduce_27),
	(28 , happyReduce_28),
	(29 , happyReduce_29),
	(30 , happyReduce_30),
	(31 , happyReduce_31),
	(32 , happyReduce_32),
	(33 , happyReduce_33),
	(34 , happyReduce_34),
	(35 , happyReduce_35),
	(36 , happyReduce_36),
	(37 , happyReduce_37),
	(38 , happyReduce_38),
	(39 , happyReduce_39),
	(40 , happyReduce_40),
	(41 , happyReduce_41),
	(42 , happyReduce_42),
	(43 , happyReduce_43),
	(44 , happyReduce_44),
	(45 , happyReduce_45),
	(46 , happyReduce_46),
	(47 , happyReduce_47),
	(48 , happyReduce_48),
	(49 , happyReduce_49),
	(50 , happyReduce_50),
	(51 , happyReduce_51),
	(52 , happyReduce_52),
	(53 , happyReduce_53),
	(54 , happyReduce_54),
	(55 , happyReduce_55),
	(56 , happyReduce_56),
	(57 , happyReduce_57),
	(58 , happyReduce_58),
	(59 , happyReduce_59),
	(60 , happyReduce_60),
	(61 , happyReduce_61),
	(62 , happyReduce_62),
	(63 , happyReduce_63),
	(64 , happyReduce_64),
	(65 , happyReduce_65),
	(66 , happyReduce_66),
	(67 , happyReduce_67),
	(68 , happyReduce_68),
	(69 , happyReduce_69),
	(70 , happyReduce_70),
	(71 , happyReduce_71),
	(72 , happyReduce_72),
	(73 , happyReduce_73),
	(74 , happyReduce_74),
	(75 , happyReduce_75),
	(76 , happyReduce_76),
	(77 , happyReduce_77),
	(78 , happyReduce_78),
	(79 , happyReduce_79),
	(80 , happyReduce_80),
	(81 , happyReduce_81),
	(82 , happyReduce_82),
	(83 , happyReduce_83),
	(84 , happyReduce_84),
	(85 , happyReduce_85),
	(86 , happyReduce_86),
	(87 , happyReduce_87),
	(88 , happyReduce_88),
	(89 , happyReduce_89),
	(90 , happyReduce_90),
	(91 , happyReduce_91),
	(92 , happyReduce_92),
	(93 , happyReduce_93),
	(94 , happyReduce_94),
	(95 , happyReduce_95),
	(96 , happyReduce_96),
	(97 , happyReduce_97),
	(98 , happyReduce_98),
	(99 , happyReduce_99),
	(100 , happyReduce_100),
	(101 , happyReduce_101),
	(102 , happyReduce_102),
	(103 , happyReduce_103),
	(104 , happyReduce_104),
	(105 , happyReduce_105),
	(106 , happyReduce_106),
	(107 , happyReduce_107),
	(108 , happyReduce_108),
	(109 , happyReduce_109),
	(110 , happyReduce_110),
	(111 , happyReduce_111),
	(112 , happyReduce_112),
	(113 , happyReduce_113),
	(114 , happyReduce_114),
	(115 , happyReduce_115),
	(116 , happyReduce_116),
	(117 , happyReduce_117),
	(118 , happyReduce_118),
	(119 , happyReduce_119),
	(120 , happyReduce_120),
	(121 , happyReduce_121),
	(122 , happyReduce_122),
	(123 , happyReduce_123),
	(124 , happyReduce_124),
	(125 , happyReduce_125),
	(126 , happyReduce_126),
	(127 , happyReduce_127),
	(128 , happyReduce_128),
	(129 , happyReduce_129),
	(130 , happyReduce_130),
	(131 , happyReduce_131),
	(132 , happyReduce_132),
	(133 , happyReduce_133),
	(134 , happyReduce_134),
	(135 , happyReduce_135),
	(136 , happyReduce_136),
	(137 , happyReduce_137),
	(138 , happyReduce_138),
	(139 , happyReduce_139),
	(140 , happyReduce_140),
	(141 , happyReduce_141),
	(142 , happyReduce_142),
	(143 , happyReduce_143),
	(144 , happyReduce_144),
	(145 , happyReduce_145),
	(146 , happyReduce_146),
	(147 , happyReduce_147),
	(148 , happyReduce_148),
	(149 , happyReduce_149),
	(150 , happyReduce_150),
	(151 , happyReduce_151),
	(152 , happyReduce_152),
	(153 , happyReduce_153),
	(154 , happyReduce_154),
	(155 , happyReduce_155),
	(156 , happyReduce_156),
	(157 , happyReduce_157),
	(158 , happyReduce_158),
	(159 , happyReduce_159),
	(160 , happyReduce_160),
	(161 , happyReduce_161),
	(162 , happyReduce_162),
	(163 , happyReduce_163),
	(164 , happyReduce_164),
	(165 , happyReduce_165),
	(166 , happyReduce_166),
	(167 , happyReduce_167),
	(168 , happyReduce_168),
	(169 , happyReduce_169),
	(170 , happyReduce_170),
	(171 , happyReduce_171),
	(172 , happyReduce_172),
	(173 , happyReduce_173),
	(174 , happyReduce_174),
	(175 , happyReduce_175),
	(176 , happyReduce_176),
	(177 , happyReduce_177),
	(178 , happyReduce_178),
	(179 , happyReduce_179),
	(180 , happyReduce_180),
	(181 , happyReduce_181),
	(182 , happyReduce_182),
	(183 , happyReduce_183),
	(184 , happyReduce_184),
	(185 , happyReduce_185),
	(186 , happyReduce_186),
	(187 , happyReduce_187),
	(188 , happyReduce_188),
	(189 , happyReduce_189),
	(190 , happyReduce_190),
	(191 , happyReduce_191),
	(192 , happyReduce_192),
	(193 , happyReduce_193),
	(194 , happyReduce_194),
	(195 , happyReduce_195),
	(196 , happyReduce_196),
	(197 , happyReduce_197),
	(198 , happyReduce_198),
	(199 , happyReduce_199),
	(200 , happyReduce_200),
	(201 , happyReduce_201),
	(202 , happyReduce_202),
	(203 , happyReduce_203),
	(204 , happyReduce_204),
	(205 , happyReduce_205),
	(206 , happyReduce_206),
	(207 , happyReduce_207),
	(208 , happyReduce_208),
	(209 , happyReduce_209),
	(210 , happyReduce_210),
	(211 , happyReduce_211),
	(212 , happyReduce_212),
	(213 , happyReduce_213),
	(214 , happyReduce_214),
	(215 , happyReduce_215),
	(216 , happyReduce_216),
	(217 , happyReduce_217),
	(218 , happyReduce_218),
	(219 , happyReduce_219),
	(220 , happyReduce_220),
	(221 , happyReduce_221),
	(222 , happyReduce_222),
	(223 , happyReduce_223),
	(224 , happyReduce_224),
	(225 , happyReduce_225),
	(226 , happyReduce_226),
	(227 , happyReduce_227),
	(228 , happyReduce_228),
	(229 , happyReduce_229),
	(230 , happyReduce_230),
	(231 , happyReduce_231),
	(232 , happyReduce_232),
	(233 , happyReduce_233),
	(234 , happyReduce_234),
	(235 , happyReduce_235),
	(236 , happyReduce_236),
	(237 , happyReduce_237),
	(238 , happyReduce_238),
	(239 , happyReduce_239),
	(240 , happyReduce_240),
	(241 , happyReduce_241),
	(242 , happyReduce_242),
	(243 , happyReduce_243),
	(244 , happyReduce_244),
	(245 , happyReduce_245),
	(246 , happyReduce_246),
	(247 , happyReduce_247),
	(248 , happyReduce_248),
	(249 , happyReduce_249),
	(250 , happyReduce_250),
	(251 , happyReduce_251),
	(252 , happyReduce_252),
	(253 , happyReduce_253),
	(254 , happyReduce_254),
	(255 , happyReduce_255),
	(256 , happyReduce_256),
	(257 , happyReduce_257),
	(258 , happyReduce_258),
	(259 , happyReduce_259),
	(260 , happyReduce_260),
	(261 , happyReduce_261),
	(262 , happyReduce_262),
	(263 , happyReduce_263),
	(264 , happyReduce_264),
	(265 , happyReduce_265),
	(266 , happyReduce_266),
	(267 , happyReduce_267),
	(268 , happyReduce_268),
	(269 , happyReduce_269),
	(270 , happyReduce_270),
	(271 , happyReduce_271),
	(272 , happyReduce_272),
	(273 , happyReduce_273),
	(274 , happyReduce_274),
	(275 , happyReduce_275),
	(276 , happyReduce_276),
	(277 , happyReduce_277),
	(278 , happyReduce_278),
	(279 , happyReduce_279),
	(280 , happyReduce_280),
	(281 , happyReduce_281),
	(282 , happyReduce_282),
	(283 , happyReduce_283),
	(284 , happyReduce_284),
	(285 , happyReduce_285),
	(286 , happyReduce_286),
	(287 , happyReduce_287),
	(288 , happyReduce_288),
	(289 , happyReduce_289),
	(290 , happyReduce_290),
	(291 , happyReduce_291),
	(292 , happyReduce_292),
	(293 , happyReduce_293),
	(294 , happyReduce_294),
	(295 , happyReduce_295),
	(296 , happyReduce_296),
	(297 , happyReduce_297),
	(298 , happyReduce_298),
	(299 , happyReduce_299),
	(300 , happyReduce_300),
	(301 , happyReduce_301),
	(302 , happyReduce_302),
	(303 , happyReduce_303),
	(304 , happyReduce_304),
	(305 , happyReduce_305),
	(306 , happyReduce_306),
	(307 , happyReduce_307),
	(308 , happyReduce_308),
	(309 , happyReduce_309),
	(310 , happyReduce_310),
	(311 , happyReduce_311),
	(312 , happyReduce_312),
	(313 , happyReduce_313),
	(314 , happyReduce_314),
	(315 , happyReduce_315),
	(316 , happyReduce_316),
	(317 , happyReduce_317),
	(318 , happyReduce_318),
	(319 , happyReduce_319),
	(320 , happyReduce_320),
	(321 , happyReduce_321),
	(322 , happyReduce_322),
	(323 , happyReduce_323),
	(324 , happyReduce_324),
	(325 , happyReduce_325)
	]

happy_n_terms = 73 :: Prelude.Int
happy_n_nonterms = 106 :: Prelude.Int

happyReduce_12 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_12 = happySpecReduce_2  0 happyReduction_12
happyReduction_12 (HappyAbsSyn15  happy_var_2)
	_
	 =  HappyAbsSyn15
		 (happy_var_2
	)
happyReduction_12 _ _  = notHappyAtAll 

happyReduce_13 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_13 = happySpecReduce_3  0 happyReduction_13
happyReduction_13 _
	(HappyAbsSyn17  happy_var_2)
	_
	 =  HappyAbsSyn15
		 (mkAnonymousModule happy_var_2
	)
happyReduction_13 _ _ _  = notHappyAtAll 

happyReduce_14 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_14 = happyReduce 5 1 happyReduction_14
happyReduction_14 (_ `HappyStk`
	(HappyAbsSyn17  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn114  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn15
		 (mkModule happy_var_1 happy_var_4
	) `HappyStk` happyRest

happyReduce_15 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_15 = happyReduce 7 1 happyReduction_15
happyReduction_15 (_ `HappyStk`
	(HappyAbsSyn17  happy_var_6) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn114  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn114  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn15
		 (mkModuleInstance happy_var_1 happy_var_3 happy_var_6
	) `HappyStk` happyRest

happyReduce_16 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_16 = happySpecReduce_1  2 happyReduction_16
happyReduction_16 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (reverse happy_var_1
	)
happyReduction_16 _  = notHappyAtAll 

happyReduce_17 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_17 = happySpecReduce_0  2 happyReduction_17
happyReduction_17  =  HappyAbsSyn17
		 ([]
	)

happyReduce_18 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_18 = happyReduce 4 3 happyReduction_18
happyReduction_18 ((HappyAbsSyn21  happy_var_4) `HappyStk`
	(HappyAbsSyn20  happy_var_3) `HappyStk`
	(HappyAbsSyn19  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (KW KW_import)    _))) `HappyStk`
	happyRest)
	 = HappyAbsSyn18
		 (Located { srcRange = rComb happy_var_1
                                                   $ fromMaybe (srcRange happy_var_2)
                                                   $ msum [ fmap srcRange happy_var_4
                                                          , fmap srcRange happy_var_3
                                                          ]
                                        , thing    = Import
                                          { iModule    = thing happy_var_2
                                          , iAs        = fmap thing happy_var_3
                                          , iSpec      = fmap thing happy_var_4
                                          }
                                        }
	) `HappyStk` happyRest

happyReduce_19 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_19 = happySpecReduce_2  4 happyReduction_19
happyReduction_19 (HappyAbsSyn116  happy_var_2)
	_
	 =  HappyAbsSyn19
		 (ImpNested `fmap` happy_var_2
	)
happyReduction_19 _ _  = notHappyAtAll 

happyReduce_20 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_20 = happySpecReduce_1  4 happyReduction_20
happyReduction_20 (HappyAbsSyn114  happy_var_1)
	 =  HappyAbsSyn19
		 (ImpTop `fmap` happy_var_1
	)
happyReduction_20 _  = notHappyAtAll 

happyReduce_21 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_21 = happySpecReduce_2  5 happyReduction_21
happyReduction_21 (HappyAbsSyn114  happy_var_2)
	_
	 =  HappyAbsSyn20
		 (Just happy_var_2
	)
happyReduction_21 _ _  = notHappyAtAll 

happyReduce_22 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_22 = happySpecReduce_0  5 happyReduction_22
happyReduction_22  =  HappyAbsSyn20
		 (Nothing
	)

happyReduce_23 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_23 = happyReduce 4 6 happyReduction_23
happyReduction_23 (_ `HappyStk`
	(HappyAbsSyn22  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn23  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn21
		 (Just Located
                                  { srcRange = case happy_var_3 of
                                      { [] -> emptyRange
                                      ; xs -> rCombs (map srcRange xs) }
                                  , thing    = happy_var_1 (reverse (map thing happy_var_3))
                                  }
	) `HappyStk` happyRest

happyReduce_24 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_24 = happySpecReduce_0  6 happyReduction_24
happyReduction_24  =  HappyAbsSyn21
		 (Nothing
	)

happyReduce_25 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_25 = happySpecReduce_3  7 happyReduction_25
happyReduction_25 (HappyAbsSyn44  happy_var_3)
	_
	(HappyAbsSyn22  happy_var_1)
	 =  HappyAbsSyn22
		 (fmap getIdent happy_var_3 : happy_var_1
	)
happyReduction_25 _ _ _  = notHappyAtAll 

happyReduce_26 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_26 = happySpecReduce_1  7 happyReduction_26
happyReduction_26 (HappyAbsSyn44  happy_var_1)
	 =  HappyAbsSyn22
		 ([fmap getIdent happy_var_1]
	)
happyReduction_26 _  = notHappyAtAll 

happyReduce_27 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_27 = happySpecReduce_0  7 happyReduction_27
happyReduction_27  =  HappyAbsSyn22
		 ([]
	)

happyReduce_28 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_28 = happySpecReduce_1  8 happyReduction_28
happyReduction_28 _
	 =  HappyAbsSyn23
		 (Hiding
	)

happyReduce_29 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_29 = happySpecReduce_0  8 happyReduction_29
happyReduction_29  =  HappyAbsSyn23
		 (Only
	)

happyReduce_30 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_30 = happySpecReduce_1  9 happyReduction_30
happyReduction_30 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn24
		 (Program (reverse happy_var_1)
	)
happyReduction_30 _  = notHappyAtAll 

happyReduce_31 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_31 = happySpecReduce_0  9 happyReduction_31
happyReduction_31  =  HappyAbsSyn24
		 (Program []
	)

happyReduce_32 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_32 = happySpecReduce_3  10 happyReduction_32
happyReduction_32 _
	(HappyAbsSyn17  happy_var_2)
	_
	 =  HappyAbsSyn24
		 (Program (reverse happy_var_2)
	)
happyReduction_32 _ _ _  = notHappyAtAll 

happyReduce_33 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_33 = happySpecReduce_2  10 happyReduction_33
happyReduction_33 _
	_
	 =  HappyAbsSyn24
		 (Program []
	)

happyReduce_34 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_34 = happySpecReduce_2  11 happyReduction_34
happyReduction_34 _
	(HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_1
	)
happyReduction_34 _ _  = notHappyAtAll 

happyReduce_35 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_35 = happySpecReduce_3  11 happyReduction_35
happyReduction_35 _
	(HappyAbsSyn17  happy_var_2)
	(HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_2 ++ happy_var_1
	)
happyReduction_35 _ _ _  = notHappyAtAll 

happyReduce_36 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_36 = happySpecReduce_1  12 happyReduction_36
happyReduction_36 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_1
	)
happyReduction_36 _  = notHappyAtAll 

happyReduce_37 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_37 = happySpecReduce_3  12 happyReduction_37
happyReduction_37 (HappyAbsSyn17  happy_var_3)
	_
	(HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_3 ++ happy_var_1
	)
happyReduction_37 _ _ _  = notHappyAtAll 

happyReduce_38 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_38 = happySpecReduce_3  12 happyReduction_38
happyReduction_38 (HappyAbsSyn17  happy_var_3)
	_
	(HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_3 ++ happy_var_1
	)
happyReduction_38 _ _ _  = notHappyAtAll 

happyReduce_39 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_39 = happySpecReduce_1  13 happyReduction_39
happyReduction_39 (HappyAbsSyn38  happy_var_1)
	 =  HappyAbsSyn17
		 ([exportDecl Nothing   Public happy_var_1]
	)
happyReduction_39 _  = notHappyAtAll 

happyReduce_40 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_40 = happySpecReduce_2  13 happyReduction_40
happyReduction_40 (HappyAbsSyn38  happy_var_2)
	(HappyAbsSyn35  happy_var_1)
	 =  HappyAbsSyn17
		 ([exportDecl (Just happy_var_1) Public happy_var_2]
	)
happyReduction_40 _ _  = notHappyAtAll 

happyReduce_41 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_41 = happyMonadReduce 3 13 happyReduction_41
happyReduction_41 ((HappyTerminal (happy_var_3@(Located _ (Token (StrLit {}) _)))) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( (return . Include) `fmap` fromStrLit happy_var_3))
	) (\r -> happyReturn (HappyAbsSyn17 r))

happyReduce_42 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_42 = happyReduce 6 13 happyReduction_42
happyReduction_42 ((HappyAbsSyn59  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn45  happy_var_4) `HappyStk`
	(HappyAbsSyn44  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn36  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn17
		 ([exportDecl happy_var_1 Public (mkProperty happy_var_3 happy_var_4 happy_var_6)]
	) `HappyStk` happyRest

happyReduce_43 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_43 = happyReduce 5 13 happyReduction_43
happyReduction_43 ((HappyAbsSyn59  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn44  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn36  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn17
		 ([exportDecl happy_var_1 Public (mkProperty happy_var_3 [] happy_var_5)]
	) `HappyStk` happyRest

happyReduce_44 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_44 = happySpecReduce_2  13 happyReduction_44
happyReduction_44 (HappyAbsSyn41  happy_var_2)
	(HappyAbsSyn36  happy_var_1)
	 =  HappyAbsSyn17
		 ([exportNewtype Public happy_var_1 happy_var_2]
	)
happyReduction_44 _ _  = notHappyAtAll 

happyReduce_45 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_45 = happySpecReduce_1  13 happyReduction_45
happyReduction_45 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_1
	)
happyReduction_45 _  = notHappyAtAll 

happyReduce_46 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_46 = happySpecReduce_1  13 happyReduction_46
happyReduction_46 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_1
	)
happyReduction_46 _  = notHappyAtAll 

happyReduce_47 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_47 = happySpecReduce_1  13 happyReduction_47
happyReduction_47 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_1
	)
happyReduction_47 _  = notHappyAtAll 

happyReduce_48 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_48 = happyMonadReduce 3 13 happyReduction_48
happyReduction_48 ((HappyAbsSyn15  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn36  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( ((:[]) . exportModule happy_var_1) `fmap` mkNested happy_var_3))
	) (\r -> happyReturn (HappyAbsSyn17 r))

happyReduce_49 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_49 = happySpecReduce_1  13 happyReduction_49
happyReduction_49 (HappyAbsSyn18  happy_var_1)
	 =  HappyAbsSyn17
		 ([DImport happy_var_1]
	)
happyReduction_49 _  = notHappyAtAll 

happyReduce_50 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_50 = happySpecReduce_1  14 happyReduction_50
happyReduction_50 (HappyAbsSyn38  happy_var_1)
	 =  HappyAbsSyn17
		 ([Decl (TopLevel {tlExport = Public, tlValue = happy_var_1 })]
	)
happyReduction_50 _  = notHappyAtAll 

happyReduce_51 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_51 = happyMonadReduce 2 14 happyReduction_51
happyReduction_51 ((HappyTerminal (happy_var_2@(Located _ (Token (StrLit {}) _)))) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( (return . Include) `fmap` fromStrLit happy_var_2))
	) (\r -> happyReturn (HappyAbsSyn17 r))

happyReduce_52 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_52 = happySpecReduce_1  14 happyReduction_52
happyReduction_52 (HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_1
	)
happyReduction_52 _  = notHappyAtAll 

happyReduce_53 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_53 = happyReduce 4 15 happyReduction_53
happyReduction_53 (_ `HappyStk`
	(HappyAbsSyn17  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn17
		 (changeExport Private (reverse happy_var_3)
	) `HappyStk` happyRest

happyReduce_54 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_54 = happyReduce 5 15 happyReduction_54
happyReduction_54 (_ `HappyStk`
	(HappyAbsSyn17  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn17
		 (changeExport Private (reverse happy_var_4)
	) `HappyStk` happyRest

happyReduce_55 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_55 = happyReduce 5 16 happyReduction_55
happyReduction_55 ((HappyAbsSyn94  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn44  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn36  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn17
		 (mkPrimDecl happy_var_1 happy_var_3 happy_var_5
	) `HappyStk` happyRest

happyReduce_56 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_56 = happyReduce 7 16 happyReduction_56
happyReduction_56 ((HappyAbsSyn94  happy_var_7) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn44  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn36  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn17
		 (mkPrimDecl happy_var_1 happy_var_4 happy_var_7
	) `HappyStk` happyRest

happyReduce_57 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_57 = happyMonadReduce 6 16 happyReduction_57
happyReduction_57 ((HappyAbsSyn98  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn94  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn36  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkPrimTypeDecl happy_var_1 happy_var_4 happy_var_6))
	) (\r -> happyReturn (HappyAbsSyn17 r))

happyReduce_58 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_58 = happyReduce 4 17 happyReduction_58
happyReduction_58 (_ `HappyStk`
	(HappyAbsSyn17  happy_var_3) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn17
		 (reverse happy_var_3
	) `HappyStk` happyRest

happyReduce_59 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_59 = happyReduce 5 17 happyReduction_59
happyReduction_59 (_ `HappyStk`
	(HappyAbsSyn17  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn17
		 (reverse happy_var_4
	) `HappyStk` happyRest

happyReduce_60 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_60 = happySpecReduce_1  18 happyReduction_60
happyReduction_60 (HappyAbsSyn34  happy_var_1)
	 =  HappyAbsSyn17
		 ([happy_var_1]
	)
happyReduction_60 _  = notHappyAtAll 

happyReduce_61 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_61 = happySpecReduce_3  18 happyReduction_61
happyReduction_61 (HappyAbsSyn34  happy_var_3)
	_
	(HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_3 : happy_var_1
	)
happyReduction_61 _ _ _  = notHappyAtAll 

happyReduce_62 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_62 = happySpecReduce_3  18 happyReduction_62
happyReduction_62 (HappyAbsSyn34  happy_var_3)
	_
	(HappyAbsSyn17  happy_var_1)
	 =  HappyAbsSyn17
		 (happy_var_3 : happy_var_1
	)
happyReduction_62 _ _ _  = notHappyAtAll 

happyReduce_63 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_63 = happyReduce 4 19 happyReduction_63
happyReduction_63 ((HappyAbsSyn94  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn44  happy_var_2) `HappyStk`
	(HappyAbsSyn36  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn34
		 (mkParFun happy_var_1 happy_var_2 happy_var_4
	) `HappyStk` happyRest

happyReduce_64 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_64 = happyMonadReduce 5 19 happyReduction_64
happyReduction_64 ((HappyAbsSyn98  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn44  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn36  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkParType happy_var_1 happy_var_3 happy_var_5))
	) (\r -> happyReturn (HappyAbsSyn34 r))

happyReduce_65 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_65 = happyMonadReduce 4 19 happyReduction_65
happyReduction_65 ((HappyAbsSyn103  happy_var_4) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( fmap (DParameterConstraint . distrLoc)
                                            (mkProp happy_var_4)))
	) (\r -> happyReturn (HappyAbsSyn34 r))

happyReduce_66 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_66 = happySpecReduce_1  20 happyReduction_66
happyReduction_66 (HappyTerminal (happy_var_1@(Located _ (Token (White DocStr) _))))
	 =  HappyAbsSyn35
		 (mkDoc (fmap tokenText happy_var_1)
	)
happyReduction_66 _  = notHappyAtAll 

happyReduce_67 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_67 = happySpecReduce_1  21 happyReduction_67
happyReduction_67 (HappyAbsSyn35  happy_var_1)
	 =  HappyAbsSyn36
		 (Just happy_var_1
	)
happyReduction_67 _  = notHappyAtAll 

happyReduce_68 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_68 = happySpecReduce_0  21 happyReduction_68
happyReduction_68  =  HappyAbsSyn36
		 (Nothing
	)

happyReduce_69 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_69 = happySpecReduce_1  22 happyReduction_69
happyReduction_69 _
	 =  HappyAbsSyn37
		 ([]
	)

happyReduce_70 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_70 = happySpecReduce_3  23 happyReduction_70
happyReduction_70 (HappyAbsSyn94  happy_var_3)
	_
	(HappyAbsSyn43  happy_var_1)
	 =  HappyAbsSyn38
		 (at (head happy_var_1,happy_var_3) $ DSignature (reverse happy_var_1) happy_var_3
	)
happyReduction_70 _ _ _  = notHappyAtAll 

happyReduce_71 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_71 = happySpecReduce_3  23 happyReduction_71
happyReduction_71 (HappyAbsSyn59  happy_var_3)
	_
	(HappyAbsSyn88  happy_var_1)
	 =  HappyAbsSyn38
		 (at (happy_var_1,happy_var_3) $ DPatBind happy_var_1 happy_var_3
	)
happyReduction_71 _ _ _  = notHappyAtAll 

happyReduce_72 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_72 = happyReduce 5 23 happyReduction_72
happyReduction_72 ((HappyAbsSyn59  happy_var_5) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn44  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _))) `HappyStk`
	happyRest)
	 = HappyAbsSyn38
		 (at (happy_var_1,happy_var_5) $ DPatBind (PVar happy_var_2) happy_var_5
	) `HappyStk` happyRest

happyReduce_73 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_73 = happyReduce 4 23 happyReduction_73
happyReduction_73 ((HappyAbsSyn37  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn48  happy_var_2) `HappyStk`
	(HappyAbsSyn44  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn38
		 (at (happy_var_1,happy_var_4) $ mkIndexedPropGuardsDecl happy_var_1 happy_var_2 happy_var_4
	) `HappyStk` happyRest

happyReduce_74 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_74 = happyReduce 4 23 happyReduction_74
happyReduction_74 ((HappyAbsSyn59  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn48  happy_var_2) `HappyStk`
	(HappyAbsSyn44  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn38
		 (at (happy_var_1,happy_var_4) $ mkIndexedDecl happy_var_1 happy_var_2 happy_var_4
	) `HappyStk` happyRest

happyReduce_75 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_75 = happyReduce 5 23 happyReduction_75
happyReduction_75 ((HappyAbsSyn59  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn88  happy_var_3) `HappyStk`
	(HappyAbsSyn44  happy_var_2) `HappyStk`
	(HappyAbsSyn88  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn38
		 (at (happy_var_1,happy_var_5) $
                             DBind $ Bind { bName      = happy_var_2
                                          , bParams    = [happy_var_1,happy_var_3]
                                          , bDef       = at happy_var_5 (Located emptyRange (DExpr happy_var_5))
                                          , bSignature = Nothing
                                          , bPragmas   = []
                                          , bMono      = False
                                          , bInfix     = True
                                          , bFixity    = Nothing
                                          , bDoc       = Nothing
                                          , bExport    = Public
                                          }
	) `HappyStk` happyRest

happyReduce_76 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_76 = happyMonadReduce 4 23 happyReduction_76
happyReduction_76 ((HappyAbsSyn103  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn44  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (KW KW_type   ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( at (happy_var_1,happy_var_4) `fmap` mkTySyn happy_var_2 [] happy_var_4))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_77 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_77 = happyMonadReduce 5 23 happyReduction_77
happyReduction_77 ((HappyAbsSyn103  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn100  happy_var_3) `HappyStk`
	(HappyAbsSyn44  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (KW KW_type   ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( at (happy_var_1,happy_var_5) `fmap` mkTySyn happy_var_2 (reverse happy_var_3) happy_var_5))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_78 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_78 = happyMonadReduce 6 23 happyReduction_78
happyReduction_78 ((HappyAbsSyn103  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn99  happy_var_4) `HappyStk`
	(HappyAbsSyn44  happy_var_3) `HappyStk`
	(HappyAbsSyn99  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (KW KW_type   ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( at (happy_var_1,happy_var_6) `fmap` mkTySyn happy_var_3 [happy_var_2, happy_var_4] happy_var_6))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_79 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_79 = happyMonadReduce 5 23 happyReduction_79
happyReduction_79 ((HappyAbsSyn103  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn44  happy_var_3) `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (KW KW_constraint) _))) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( at (happy_var_2,happy_var_5) `fmap` mkPropSyn happy_var_3 [] happy_var_5))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_80 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_80 = happyMonadReduce 6 23 happyReduction_80
happyReduction_80 ((HappyAbsSyn103  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn100  happy_var_4) `HappyStk`
	(HappyAbsSyn44  happy_var_3) `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (KW KW_constraint) _))) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( at (happy_var_2,happy_var_6) `fmap` mkPropSyn happy_var_3 (reverse happy_var_4) happy_var_6))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_81 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_81 = happyMonadReduce 7 23 happyReduction_81
happyReduction_81 ((HappyAbsSyn103  happy_var_7) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn99  happy_var_5) `HappyStk`
	(HappyAbsSyn44  happy_var_4) `HappyStk`
	(HappyAbsSyn99  happy_var_3) `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (KW KW_constraint) _))) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( at (happy_var_2,happy_var_7) `fmap` mkPropSyn happy_var_4 [happy_var_3, happy_var_5] happy_var_7))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_82 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_82 = happyMonadReduce 3 23 happyReduction_82
happyReduction_82 ((HappyAbsSyn58  happy_var_3) `HappyStk`
	(HappyTerminal (happy_var_2@(Located _ (Token (Num   {}) _)))) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( mkFixity LeftAssoc  happy_var_2 (reverse happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_83 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_83 = happyMonadReduce 3 23 happyReduction_83
happyReduction_83 ((HappyAbsSyn58  happy_var_3) `HappyStk`
	(HappyTerminal (happy_var_2@(Located _ (Token (Num   {}) _)))) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( mkFixity RightAssoc happy_var_2 (reverse happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_84 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_84 = happyMonadReduce 3 23 happyReduction_84
happyReduction_84 ((HappyAbsSyn58  happy_var_3) `HappyStk`
	(HappyTerminal (happy_var_2@(Located _ (Token (Num   {}) _)))) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( mkFixity NonAssoc   happy_var_2 (reverse happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_85 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_85 = happyMonadReduce 1 23 happyReduction_85
happyReduction_85 (_ `HappyStk`
	happyRest) tk
	 = happyThen ((( expected "a declaration"))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_86 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_86 = happySpecReduce_1  24 happyReduction_86
happyReduction_86 (HappyAbsSyn38  happy_var_1)
	 =  HappyAbsSyn39
		 ([happy_var_1]
	)
happyReduction_86 _  = notHappyAtAll 

happyReduce_87 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_87 = happySpecReduce_2  24 happyReduction_87
happyReduction_87 _
	(HappyAbsSyn38  happy_var_1)
	 =  HappyAbsSyn39
		 ([happy_var_1]
	)
happyReduction_87 _ _  = notHappyAtAll 

happyReduce_88 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_88 = happySpecReduce_3  24 happyReduction_88
happyReduction_88 (HappyAbsSyn39  happy_var_3)
	_
	(HappyAbsSyn38  happy_var_1)
	 =  HappyAbsSyn39
		 ((happy_var_1:happy_var_3)
	)
happyReduction_88 _ _ _  = notHappyAtAll 

happyReduce_89 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_89 = happyReduce 4 25 happyReduction_89
happyReduction_89 ((HappyAbsSyn59  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn88  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn38
		 (at (happy_var_2,happy_var_4) $ DPatBind happy_var_2 happy_var_4
	) `HappyStk` happyRest

happyReduce_90 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_90 = happyReduce 5 25 happyReduction_90
happyReduction_90 ((HappyAbsSyn59  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn48  happy_var_3) `HappyStk`
	(HappyAbsSyn44  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn38
		 (at (happy_var_2,happy_var_5) $ mkIndexedDecl happy_var_2 happy_var_3 happy_var_5
	) `HappyStk` happyRest

happyReduce_91 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_91 = happyReduce 6 25 happyReduction_91
happyReduction_91 ((HappyAbsSyn59  happy_var_6) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn44  happy_var_3) `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (Sym ParenL  ) _))) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn38
		 (at (happy_var_2,happy_var_6) $ DPatBind (PVar happy_var_3) happy_var_6
	) `HappyStk` happyRest

happyReduce_92 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_92 = happyReduce 6 25 happyReduction_92
happyReduction_92 ((HappyAbsSyn59  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn88  happy_var_4) `HappyStk`
	(HappyAbsSyn44  happy_var_3) `HappyStk`
	(HappyAbsSyn88  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn38
		 (at (happy_var_2,happy_var_6) $
                             DBind $ Bind { bName      = happy_var_3
                                          , bParams    = [happy_var_2,happy_var_4]
                                          , bDef       = at happy_var_6 (Located emptyRange (DExpr happy_var_6))
                                          , bSignature = Nothing
                                          , bPragmas   = []
                                          , bMono      = False
                                          , bInfix     = True
                                          , bFixity    = Nothing
                                          , bDoc       = Nothing
                                          , bExport    = Public
                                          }
	) `HappyStk` happyRest

happyReduce_93 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_93 = happyReduce 4 25 happyReduction_93
happyReduction_93 ((HappyAbsSyn94  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn43  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn38
		 (at (head happy_var_2,happy_var_4) $ DSignature (reverse happy_var_2) happy_var_4
	) `HappyStk` happyRest

happyReduce_94 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_94 = happyMonadReduce 4 25 happyReduction_94
happyReduction_94 ((HappyAbsSyn103  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn44  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (KW KW_type   ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( at (happy_var_1,happy_var_4) `fmap` mkTySyn happy_var_2 [] happy_var_4))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_95 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_95 = happyMonadReduce 5 25 happyReduction_95
happyReduction_95 ((HappyAbsSyn103  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn100  happy_var_3) `HappyStk`
	(HappyAbsSyn44  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (KW KW_type   ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( at (happy_var_1,happy_var_5) `fmap` mkTySyn happy_var_2 (reverse happy_var_3) happy_var_5))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_96 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_96 = happyMonadReduce 6 25 happyReduction_96
happyReduction_96 ((HappyAbsSyn103  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn99  happy_var_4) `HappyStk`
	(HappyAbsSyn44  happy_var_3) `HappyStk`
	(HappyAbsSyn99  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (KW KW_type   ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( at (happy_var_1,happy_var_6) `fmap` mkTySyn happy_var_3 [happy_var_2, happy_var_4] happy_var_6))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_97 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_97 = happyMonadReduce 5 25 happyReduction_97
happyReduction_97 ((HappyAbsSyn103  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn44  happy_var_3) `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (KW KW_constraint) _))) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( at (happy_var_2,happy_var_5) `fmap` mkPropSyn happy_var_3 [] happy_var_5))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_98 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_98 = happyMonadReduce 6 25 happyReduction_98
happyReduction_98 ((HappyAbsSyn103  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn100  happy_var_4) `HappyStk`
	(HappyAbsSyn44  happy_var_3) `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (KW KW_constraint) _))) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( at (happy_var_2,happy_var_6) `fmap` mkPropSyn happy_var_3 (reverse happy_var_4) happy_var_6))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_99 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_99 = happyMonadReduce 7 25 happyReduction_99
happyReduction_99 ((HappyAbsSyn103  happy_var_7) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn99  happy_var_5) `HappyStk`
	(HappyAbsSyn44  happy_var_4) `HappyStk`
	(HappyAbsSyn99  happy_var_3) `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (KW KW_constraint) _))) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( at (happy_var_2,happy_var_7) `fmap` mkPropSyn happy_var_4 [happy_var_3, happy_var_5] happy_var_7))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_100 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_100 = happyMonadReduce 3 25 happyReduction_100
happyReduction_100 ((HappyAbsSyn58  happy_var_3) `HappyStk`
	(HappyTerminal (happy_var_2@(Located _ (Token (Num   {}) _)))) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( mkFixity LeftAssoc  happy_var_2 (reverse happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_101 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_101 = happyMonadReduce 3 25 happyReduction_101
happyReduction_101 ((HappyAbsSyn58  happy_var_3) `HappyStk`
	(HappyTerminal (happy_var_2@(Located _ (Token (Num   {}) _)))) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( mkFixity RightAssoc happy_var_2 (reverse happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_102 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_102 = happyMonadReduce 3 25 happyReduction_102
happyReduction_102 ((HappyAbsSyn58  happy_var_3) `HappyStk`
	(HappyTerminal (happy_var_2@(Located _ (Token (Num   {}) _)))) `HappyStk`
	_ `HappyStk`
	happyRest) tk
	 = happyThen ((( mkFixity NonAssoc   happy_var_2 (reverse happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn38 r))

happyReduce_103 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_103 = happyReduce 4 26 happyReduction_103
happyReduction_103 ((HappyAbsSyn42  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn116  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn41
		 (Newtype happy_var_2 [] (thing happy_var_4)
	) `HappyStk` happyRest

happyReduce_104 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_104 = happyReduce 5 26 happyReduction_104
happyReduction_104 ((HappyAbsSyn42  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn100  happy_var_3) `HappyStk`
	(HappyAbsSyn116  happy_var_2) `HappyStk`
	_ `HappyStk`
	happyRest)
	 = HappyAbsSyn41
		 (Newtype happy_var_2 (reverse happy_var_3) (thing happy_var_5)
	) `HappyStk` happyRest

happyReduce_105 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_105 = happyMonadReduce 2 27 happyReduction_105
happyReduction_105 ((HappyTerminal (Located happy_var_2 (Token (Sym CurlyR  ) _))) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkRecord (rComb happy_var_1 happy_var_2) (Located emptyRange) []))
	) (\r -> happyReturn (HappyAbsSyn42 r))

happyReduce_106 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_106 = happyMonadReduce 3 27 happyReduction_106
happyReduction_106 ((HappyTerminal (Located happy_var_3 (Token (Sym CurlyR  ) _))) `HappyStk`
	(HappyAbsSyn111  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkRecord (rComb happy_var_1 happy_var_3) (Located emptyRange) happy_var_2))
	) (\r -> happyReturn (HappyAbsSyn42 r))

happyReduce_107 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_107 = happySpecReduce_1  28 happyReduction_107
happyReduction_107 (HappyAbsSyn44  happy_var_1)
	 =  HappyAbsSyn43
		 ([ happy_var_1]
	)
happyReduction_107 _  = notHappyAtAll 

happyReduce_108 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_108 = happySpecReduce_3  28 happyReduction_108
happyReduction_108 (HappyAbsSyn44  happy_var_3)
	_
	(HappyAbsSyn43  happy_var_1)
	 =  HappyAbsSyn43
		 (happy_var_3 : happy_var_1
	)
happyReduction_108 _ _ _  = notHappyAtAll 

happyReduce_109 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_109 = happySpecReduce_1  29 happyReduction_109
happyReduction_109 (HappyAbsSyn44  happy_var_1)
	 =  HappyAbsSyn44
		 (happy_var_1
	)
happyReduction_109 _  = notHappyAtAll 

happyReduce_110 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_110 = happySpecReduce_3  29 happyReduction_110
happyReduction_110 _
	(HappyAbsSyn44  happy_var_2)
	_
	 =  HappyAbsSyn44
		 (happy_var_2
	)
happyReduction_110 _ _ _  = notHappyAtAll 

happyReduce_111 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_111 = happySpecReduce_1  30 happyReduction_111
happyReduction_111 (HappyAbsSyn88  happy_var_1)
	 =  HappyAbsSyn45
		 ([happy_var_1]
	)
happyReduction_111 _  = notHappyAtAll 

happyReduce_112 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_112 = happySpecReduce_2  30 happyReduction_112
happyReduction_112 (HappyAbsSyn88  happy_var_2)
	(HappyAbsSyn45  happy_var_1)
	 =  HappyAbsSyn45
		 (happy_var_2 : happy_var_1
	)
happyReduction_112 _ _  = notHappyAtAll 

happyReduce_113 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_113 = happySpecReduce_2  31 happyReduction_113
happyReduction_113 (HappyAbsSyn45  happy_var_2)
	_
	 =  HappyAbsSyn45
		 (happy_var_2
	)
happyReduction_113 _ _  = notHappyAtAll 

happyReduce_114 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_114 = happySpecReduce_0  31 happyReduction_114
happyReduction_114  =  HappyAbsSyn45
		 ([]
	)

happyReduce_115 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_115 = happySpecReduce_1  32 happyReduction_115
happyReduction_115 (HappyAbsSyn88  happy_var_1)
	 =  HappyAbsSyn45
		 ([happy_var_1]
	)
happyReduction_115 _  = notHappyAtAll 

happyReduce_116 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_116 = happySpecReduce_3  32 happyReduction_116
happyReduction_116 (HappyAbsSyn88  happy_var_3)
	_
	(HappyAbsSyn45  happy_var_1)
	 =  HappyAbsSyn45
		 (happy_var_3 : happy_var_1
	)
happyReduction_116 _ _ _  = notHappyAtAll 

happyReduce_117 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_117 = happySpecReduce_2  33 happyReduction_117
happyReduction_117 (HappyAbsSyn45  happy_var_2)
	(HappyAbsSyn45  happy_var_1)
	 =  HappyAbsSyn48
		 ((happy_var_1, happy_var_2)
	)
happyReduction_117 _ _  = notHappyAtAll 

happyReduce_118 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_118 = happySpecReduce_2  33 happyReduction_118
happyReduction_118 (HappyAbsSyn45  happy_var_2)
	_
	 =  HappyAbsSyn48
		 (([], happy_var_2)
	)
happyReduction_118 _ _  = notHappyAtAll 

happyReduce_119 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_119 = happySpecReduce_0  34 happyReduction_119
happyReduction_119  =  HappyAbsSyn48
		 (([],[])
	)

happyReduce_120 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_120 = happySpecReduce_1  34 happyReduction_120
happyReduction_120 (HappyAbsSyn48  happy_var_1)
	 =  HappyAbsSyn48
		 (happy_var_1
	)
happyReduction_120 _  = notHappyAtAll 

happyReduce_121 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_121 = happySpecReduce_2  35 happyReduction_121
happyReduction_121 _
	(HappyAbsSyn38  happy_var_1)
	 =  HappyAbsSyn39
		 ([happy_var_1]
	)
happyReduction_121 _ _  = notHappyAtAll 

happyReduce_122 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_122 = happySpecReduce_3  35 happyReduction_122
happyReduction_122 _
	(HappyAbsSyn38  happy_var_2)
	(HappyAbsSyn39  happy_var_1)
	 =  HappyAbsSyn39
		 (happy_var_2 : happy_var_1
	)
happyReduction_122 _ _ _  = notHappyAtAll 

happyReduce_123 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_123 = happySpecReduce_1  36 happyReduction_123
happyReduction_123 (HappyAbsSyn38  happy_var_1)
	 =  HappyAbsSyn39
		 ([happy_var_1]
	)
happyReduction_123 _  = notHappyAtAll 

happyReduce_124 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_124 = happySpecReduce_3  36 happyReduction_124
happyReduction_124 (HappyAbsSyn38  happy_var_3)
	_
	(HappyAbsSyn39  happy_var_1)
	 =  HappyAbsSyn39
		 (happy_var_3 : happy_var_1
	)
happyReduction_124 _ _ _  = notHappyAtAll 

happyReduce_125 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_125 = happySpecReduce_3  36 happyReduction_125
happyReduction_125 (HappyAbsSyn38  happy_var_3)
	_
	(HappyAbsSyn39  happy_var_1)
	 =  HappyAbsSyn39
		 (happy_var_3 : happy_var_1
	)
happyReduction_125 _ _ _  = notHappyAtAll 

happyReduce_126 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_126 = happySpecReduce_3  37 happyReduction_126
happyReduction_126 _
	(HappyAbsSyn39  happy_var_2)
	_
	 =  HappyAbsSyn39
		 (happy_var_2
	)
happyReduction_126 _ _ _  = notHappyAtAll 

happyReduce_127 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_127 = happySpecReduce_2  37 happyReduction_127
happyReduction_127 _
	_
	 =  HappyAbsSyn39
		 ([]
	)

happyReduce_128 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_128 = happySpecReduce_1  38 happyReduction_128
happyReduction_128 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn53
		 (ExprInput happy_var_1
	)
happyReduction_128 _  = notHappyAtAll 

happyReduce_129 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_129 = happySpecReduce_1  38 happyReduction_129
happyReduction_129 (HappyAbsSyn39  happy_var_1)
	 =  HappyAbsSyn53
		 (LetInput happy_var_1
	)
happyReduction_129 _  = notHappyAtAll 

happyReduce_130 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_130 = happySpecReduce_0  38 happyReduction_130
happyReduction_130  =  HappyAbsSyn53
		 (EmptyInput
	)

happyReduce_131 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_131 = happySpecReduce_1  39 happyReduction_131
happyReduction_131 (HappyAbsSyn44  happy_var_1)
	 =  HappyAbsSyn44
		 (happy_var_1
	)
happyReduction_131 _  = notHappyAtAll 

happyReduce_132 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_132 = happySpecReduce_1  39 happyReduction_132
happyReduction_132 (HappyTerminal (happy_var_1@(Located _ (Token (Op  Other{}   )  _))))
	 =  HappyAbsSyn44
		 (let Token (Op (Other ns i)) _ = thing happy_var_1
                                       in mkQual (mkModName ns) (mkInfix i) A.<$ happy_var_1
	)
happyReduction_132 _  = notHappyAtAll 

happyReduce_133 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_133 = happySpecReduce_1  40 happyReduction_133
happyReduction_133 (HappyAbsSyn44  happy_var_1)
	 =  HappyAbsSyn44
		 (happy_var_1
	)
happyReduction_133 _  = notHappyAtAll 

happyReduce_134 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_134 = happySpecReduce_1  40 happyReduction_134
happyReduction_134 (HappyTerminal (Located happy_var_1 (Token (Op Hash) _)))
	 =  HappyAbsSyn44
		 (Located happy_var_1 $ mkUnqual $ mkInfix "#"
	)
happyReduction_134 _  = notHappyAtAll 

happyReduce_135 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_135 = happySpecReduce_1  40 happyReduction_135
happyReduction_135 (HappyTerminal (Located happy_var_1 (Token (Op At) _)))
	 =  HappyAbsSyn44
		 (Located happy_var_1 $ mkUnqual $ mkInfix "@"
	)
happyReduction_135 _  = notHappyAtAll 

happyReduce_136 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_136 = happySpecReduce_1  41 happyReduction_136
happyReduction_136 (HappyAbsSyn44  happy_var_1)
	 =  HappyAbsSyn44
		 (happy_var_1
	)
happyReduction_136 _  = notHappyAtAll 

happyReduce_137 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_137 = happySpecReduce_1  41 happyReduction_137
happyReduction_137 (HappyTerminal (Located happy_var_1 (Token (Op Mul)   _)))
	 =  HappyAbsSyn44
		 (Located happy_var_1 $ mkUnqual $ mkInfix "*"
	)
happyReduction_137 _  = notHappyAtAll 

happyReduce_138 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_138 = happySpecReduce_1  41 happyReduction_138
happyReduction_138 (HappyTerminal (Located happy_var_1 (Token (Op Plus)  _)))
	 =  HappyAbsSyn44
		 (Located happy_var_1 $ mkUnqual $ mkInfix "+"
	)
happyReduction_138 _  = notHappyAtAll 

happyReduce_139 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_139 = happySpecReduce_1  41 happyReduction_139
happyReduction_139 (HappyTerminal (Located happy_var_1 (Token (Op Minus) _)))
	 =  HappyAbsSyn44
		 (Located happy_var_1 $ mkUnqual $ mkInfix "-"
	)
happyReduction_139 _  = notHappyAtAll 

happyReduce_140 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_140 = happySpecReduce_1  41 happyReduction_140
happyReduction_140 (HappyTerminal (Located happy_var_1 (Token (Op Complement) _)))
	 =  HappyAbsSyn44
		 (Located happy_var_1 $ mkUnqual $ mkInfix "~"
	)
happyReduction_140 _  = notHappyAtAll 

happyReduce_141 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_141 = happySpecReduce_1  41 happyReduction_141
happyReduction_141 (HappyTerminal (Located happy_var_1 (Token (Op Exp)   _)))
	 =  HappyAbsSyn44
		 (Located happy_var_1 $ mkUnqual $ mkInfix "^^"
	)
happyReduction_141 _  = notHappyAtAll 

happyReduce_142 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_142 = happySpecReduce_1  41 happyReduction_142
happyReduction_142 (HappyTerminal (Located happy_var_1 (Token (Sym Lt      ) _)))
	 =  HappyAbsSyn44
		 (Located happy_var_1 $ mkUnqual $ mkInfix "<"
	)
happyReduction_142 _  = notHappyAtAll 

happyReduce_143 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_143 = happySpecReduce_1  41 happyReduction_143
happyReduction_143 (HappyTerminal (Located happy_var_1 (Token (Sym Gt      ) _)))
	 =  HappyAbsSyn44
		 (Located happy_var_1 $ mkUnqual $ mkInfix ">"
	)
happyReduction_143 _  = notHappyAtAll 

happyReduce_144 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_144 = happySpecReduce_1  42 happyReduction_144
happyReduction_144 (HappyTerminal (happy_var_1@(Located _ (Token (Op (Other [] _)) _))))
	 =  HappyAbsSyn44
		 (let Token (Op (Other [] str)) _ = thing happy_var_1
                                       in mkUnqual (mkInfix str) A.<$ happy_var_1
	)
happyReduction_144 _  = notHappyAtAll 

happyReduce_145 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_145 = happySpecReduce_1  43 happyReduction_145
happyReduction_145 (HappyAbsSyn44  happy_var_1)
	 =  HappyAbsSyn58
		 ([happy_var_1]
	)
happyReduction_145 _  = notHappyAtAll 

happyReduce_146 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_146 = happySpecReduce_3  43 happyReduction_146
happyReduction_146 (HappyAbsSyn44  happy_var_3)
	_
	(HappyAbsSyn58  happy_var_1)
	 =  HappyAbsSyn58
		 (happy_var_3 : happy_var_1
	)
happyReduction_146 _ _ _  = notHappyAtAll 

happyReduce_147 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_147 = happySpecReduce_1  44 happyReduction_147
happyReduction_147 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (happy_var_1
	)
happyReduction_147 _  = notHappyAtAll 

happyReduce_148 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_148 = happySpecReduce_3  44 happyReduction_148
happyReduction_148 (HappyAbsSyn61  happy_var_3)
	_
	(HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_3) (EWhere happy_var_1 (thing happy_var_3))
	)
happyReduction_148 _ _ _  = notHappyAtAll 

happyReduce_149 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_149 = happySpecReduce_3  45 happyReduction_149
happyReduction_149 (HappyAbsSyn59  happy_var_3)
	(HappyAbsSyn44  happy_var_2)
	(HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (binOp happy_var_1 happy_var_2 happy_var_3
	)
happyReduction_149 _ _ _  = notHappyAtAll 

happyReduce_150 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_150 = happySpecReduce_1  45 happyReduction_150
happyReduction_150 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (happy_var_1
	)
happyReduction_150 _  = notHappyAtAll 

happyReduce_151 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_151 = happySpecReduce_1  45 happyReduction_151
happyReduction_151 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (happy_var_1
	)
happyReduction_151 _  = notHappyAtAll 

happyReduce_152 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_152 = happySpecReduce_2  46 happyReduction_152
happyReduction_152 (HappyTerminal (Located happy_var_2 (Token (Sym CurlyR  ) _)))
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _)))
	 =  HappyAbsSyn61
		 (Located (rComb happy_var_1 happy_var_2) []
	)
happyReduction_152 _ _  = notHappyAtAll 

happyReduce_153 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_153 = happySpecReduce_3  46 happyReduction_153
happyReduction_153 (HappyTerminal (Located happy_var_3 (Token (Sym CurlyR  ) _)))
	(HappyAbsSyn39  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _)))
	 =  HappyAbsSyn61
		 (Located (rComb happy_var_1 happy_var_3) (reverse happy_var_2)
	)
happyReduction_153 _ _ _  = notHappyAtAll 

happyReduce_154 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_154 = happySpecReduce_2  46 happyReduction_154
happyReduction_154 (HappyTerminal (Located happy_var_2 (Token (Virt VCurlyR)  _)))
	(HappyTerminal (Located happy_var_1 (Token (Virt VCurlyL)  _)))
	 =  HappyAbsSyn61
		 (Located (rComb happy_var_1 happy_var_2) []
	)
happyReduction_154 _ _  = notHappyAtAll 

happyReduce_155 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_155 = happySpecReduce_3  46 happyReduction_155
happyReduction_155 (HappyTerminal (Located happy_var_3 (Token (Virt VCurlyR)  _)))
	(HappyAbsSyn39  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Virt VCurlyL)  _)))
	 =  HappyAbsSyn61
		 (let l2 = fromMaybe happy_var_3 (getLoc happy_var_2)
                                    in Located (rComb happy_var_1 l2) (reverse happy_var_2)
	)
happyReduction_155 _ _ _  = notHappyAtAll 

happyReduce_156 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_156 = happySpecReduce_3  47 happyReduction_156
happyReduction_156 (HappyAbsSyn103  happy_var_3)
	_
	(HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_3) (ETyped happy_var_1 happy_var_3)
	)
happyReduction_156 _ _ _  = notHappyAtAll 

happyReduce_157 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_157 = happySpecReduce_3  48 happyReduction_157
happyReduction_157 (HappyAbsSyn59  happy_var_3)
	(HappyAbsSyn44  happy_var_2)
	(HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (binOp happy_var_1 happy_var_2 happy_var_3
	)
happyReduction_157 _ _ _  = notHappyAtAll 

happyReduce_158 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_158 = happySpecReduce_1  48 happyReduction_158
happyReduction_158 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (happy_var_1
	)
happyReduction_158 _  = notHappyAtAll 

happyReduce_159 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_159 = happyReduce 4 49 happyReduction_159
happyReduction_159 ((HappyAbsSyn59  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn65  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (KW KW_if     ) _))) `HappyStk`
	happyRest)
	 = HappyAbsSyn59
		 (at (happy_var_1,happy_var_4) $ mkIf (reverse happy_var_2) happy_var_4
	) `HappyStk` happyRest

happyReduce_160 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_160 = happyReduce 4 49 happyReduction_160
happyReduction_160 ((HappyAbsSyn59  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn45  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym Lambda  ) _))) `HappyStk`
	happyRest)
	 = HappyAbsSyn59
		 (at (happy_var_1,happy_var_4) $ EFun emptyFunDesc (reverse happy_var_2) happy_var_4
	) `HappyStk` happyRest

happyReduce_161 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_161 = happySpecReduce_1  50 happyReduction_161
happyReduction_161 (HappyAbsSyn66  happy_var_1)
	 =  HappyAbsSyn65
		 ([happy_var_1]
	)
happyReduction_161 _  = notHappyAtAll 

happyReduce_162 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_162 = happySpecReduce_3  50 happyReduction_162
happyReduction_162 (HappyAbsSyn66  happy_var_3)
	_
	(HappyAbsSyn65  happy_var_1)
	 =  HappyAbsSyn65
		 (happy_var_3 : happy_var_1
	)
happyReduction_162 _ _ _  = notHappyAtAll 

happyReduce_163 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_163 = happySpecReduce_3  51 happyReduction_163
happyReduction_163 (HappyAbsSyn59  happy_var_3)
	_
	(HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn66
		 ((happy_var_1, happy_var_3)
	)
happyReduction_163 _ _ _  = notHappyAtAll 

happyReduce_164 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_164 = happySpecReduce_2  52 happyReduction_164
happyReduction_164 (HappyAbsSyn59  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Op Minus) _)))
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_2) (ENeg happy_var_2)
	)
happyReduction_164 _ _  = notHappyAtAll 

happyReduce_165 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_165 = happySpecReduce_2  52 happyReduction_165
happyReduction_165 (HappyAbsSyn59  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Op Complement) _)))
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_2) (EComplement happy_var_2)
	)
happyReduction_165 _ _  = notHappyAtAll 

happyReduce_166 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_166 = happySpecReduce_1  52 happyReduction_166
happyReduction_166 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (happy_var_1
	)
happyReduction_166 _  = notHappyAtAll 

happyReduce_167 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_167 = happySpecReduce_2  53 happyReduction_167
happyReduction_167 (HappyAbsSyn59  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Op Minus) _)))
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_2) (ENeg happy_var_2)
	)
happyReduction_167 _ _  = notHappyAtAll 

happyReduce_168 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_168 = happySpecReduce_2  53 happyReduction_168
happyReduction_168 (HappyAbsSyn59  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Op Complement) _)))
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_2) (EComplement happy_var_2)
	)
happyReduction_168 _ _  = notHappyAtAll 

happyReduce_169 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_169 = happySpecReduce_1  53 happyReduction_169
happyReduction_169 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (happy_var_1
	)
happyReduction_169 _  = notHappyAtAll 

happyReduce_170 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_170 = happyMonadReduce 1 54 happyReduction_170
happyReduction_170 ((HappyAbsSyn71  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkEApp happy_var_1))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_171 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_171 = happySpecReduce_2  55 happyReduction_171
happyReduction_171 (HappyAbsSyn59  happy_var_2)
	(HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_2) (EApp happy_var_1 happy_var_2)
	)
happyReduction_171 _ _  = notHappyAtAll 

happyReduce_172 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_172 = happySpecReduce_1  55 happyReduction_172
happyReduction_172 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (happy_var_1
	)
happyReduction_172 _  = notHappyAtAll 

happyReduce_173 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_173 = happySpecReduce_1  55 happyReduction_173
happyReduction_173 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (happy_var_1
	)
happyReduction_173 _  = notHappyAtAll 

happyReduce_174 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_174 = happySpecReduce_1  56 happyReduction_174
happyReduction_174 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn71
		 (happy_var_1 :| []
	)
happyReduction_174 _  = notHappyAtAll 

happyReduce_175 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_175 = happySpecReduce_2  56 happyReduction_175
happyReduction_175 (HappyAbsSyn59  happy_var_2)
	(HappyAbsSyn71  happy_var_1)
	 =  HappyAbsSyn71
		 (cons happy_var_2 happy_var_1
	)
happyReduction_175 _ _  = notHappyAtAll 

happyReduce_176 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_176 = happySpecReduce_1  57 happyReduction_176
happyReduction_176 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (happy_var_1
	)
happyReduction_176 _  = notHappyAtAll 

happyReduce_177 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_177 = happySpecReduce_1  57 happyReduction_177
happyReduction_177 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (happy_var_1
	)
happyReduction_177 _  = notHappyAtAll 

happyReduce_178 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_178 = happySpecReduce_1  58 happyReduction_178
happyReduction_178 (HappyAbsSyn116  happy_var_1)
	 =  HappyAbsSyn59
		 (at happy_var_1 $ EVar (thing happy_var_1)
	)
happyReduction_178 _  = notHappyAtAll 

happyReduce_179 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_179 = happySpecReduce_1  58 happyReduction_179
happyReduction_179 (HappyTerminal (happy_var_1@(Located _ (Token (Num   {}) _))))
	 =  HappyAbsSyn59
		 (at happy_var_1 $ numLit (thing happy_var_1)
	)
happyReduction_179 _  = notHappyAtAll 

happyReduce_180 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_180 = happySpecReduce_1  58 happyReduction_180
happyReduction_180 (HappyTerminal (happy_var_1@(Located _ (Token (Frac  {}) _))))
	 =  HappyAbsSyn59
		 (at happy_var_1 $ fracLit (thing happy_var_1)
	)
happyReduction_180 _  = notHappyAtAll 

happyReduce_181 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_181 = happySpecReduce_1  58 happyReduction_181
happyReduction_181 (HappyTerminal (happy_var_1@(Located _ (Token (StrLit {}) _))))
	 =  HappyAbsSyn59
		 (at happy_var_1 $ ELit $ ECString $ getStr happy_var_1
	)
happyReduction_181 _  = notHappyAtAll 

happyReduce_182 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_182 = happySpecReduce_1  58 happyReduction_182
happyReduction_182 (HappyTerminal (happy_var_1@(Located _ (Token (ChrLit {}) _))))
	 =  HappyAbsSyn59
		 (at happy_var_1 $ ELit $ ECChar $ getChr happy_var_1
	)
happyReduction_182 _  = notHappyAtAll 

happyReduce_183 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_183 = happySpecReduce_1  58 happyReduction_183
happyReduction_183 (HappyTerminal (Located happy_var_1 (Token (Sym Underscore ) _)))
	 =  HappyAbsSyn59
		 (at happy_var_1 $ EVar $ mkUnqual $ mkIdent "_"
	)
happyReduction_183 _  = notHappyAtAll 

happyReduce_184 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_184 = happySpecReduce_3  58 happyReduction_184
happyReduction_184 (HappyTerminal (Located happy_var_3 (Token (Sym ParenR  ) _)))
	(HappyAbsSyn59  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _)))
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_3) $ EParens happy_var_2
	)
happyReduction_184 _ _ _  = notHappyAtAll 

happyReduce_185 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_185 = happySpecReduce_3  58 happyReduction_185
happyReduction_185 (HappyTerminal (Located happy_var_3 (Token (Sym ParenR  ) _)))
	(HappyAbsSyn78  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _)))
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_3) $ ETuple (reverse happy_var_2)
	)
happyReduction_185 _ _ _  = notHappyAtAll 

happyReduce_186 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_186 = happySpecReduce_2  58 happyReduction_186
happyReduction_186 (HappyTerminal (Located happy_var_2 (Token (Sym ParenR  ) _)))
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _)))
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_2) $ ETuple []
	)
happyReduction_186 _ _  = notHappyAtAll 

happyReduce_187 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_187 = happyMonadReduce 2 58 happyReduction_187
happyReduction_187 ((HappyTerminal (Located happy_var_2 (Token (Sym CurlyR  ) _))) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkRecord (rComb happy_var_1 happy_var_2) ERecord []))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_188 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_188 = happyMonadReduce 3 58 happyReduction_188
happyReduction_188 ((HappyTerminal (Located happy_var_3 (Token (Sym CurlyR  ) _))) `HappyStk`
	(HappyAbsSyn79  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( case happy_var_2 of {
                                       Left upd -> pure $ at (happy_var_1,happy_var_3) upd;
                                       Right fs -> mkRecord (rComb happy_var_1 happy_var_3) ERecord fs; }))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_189 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_189 = happySpecReduce_2  58 happyReduction_189
happyReduction_189 (HappyTerminal (Located happy_var_2 (Token (Sym BracketR) _)))
	(HappyTerminal (Located happy_var_1 (Token (Sym BracketL) _)))
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_2) $ EList []
	)
happyReduction_189 _ _  = notHappyAtAll 

happyReduce_190 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_190 = happySpecReduce_3  58 happyReduction_190
happyReduction_190 (HappyTerminal (Located happy_var_3 (Token (Sym BracketR) _)))
	(HappyAbsSyn59  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym BracketL) _)))
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_3) happy_var_2
	)
happyReduction_190 _ _ _  = notHappyAtAll 

happyReduce_191 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_191 = happySpecReduce_2  58 happyReduction_191
happyReduction_191 (HappyAbsSyn103  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym BackTick) _)))
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_2) $ ETypeVal happy_var_2
	)
happyReduction_191 _ _  = notHappyAtAll 

happyReduce_192 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_192 = happySpecReduce_3  58 happyReduction_192
happyReduction_192 (HappyTerminal (Located happy_var_3 (Token (Sym ParenR  ) _)))
	(HappyAbsSyn44  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _)))
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_3) $ EVar $ thing happy_var_2
	)
happyReduction_192 _ _ _  = notHappyAtAll 

happyReduce_193 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_193 = happyMonadReduce 2 58 happyReduction_193
happyReduction_193 ((HappyTerminal (Located happy_var_2 (Token (Sym TriR    ) _))) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym TriL    ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkPoly (rComb happy_var_1 happy_var_2) []))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_194 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_194 = happyMonadReduce 3 58 happyReduction_194
happyReduction_194 ((HappyTerminal (Located happy_var_3 (Token (Sym TriR    ) _))) `HappyStk`
	(HappyAbsSyn76  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym TriL    ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkPoly (rComb happy_var_1 happy_var_3) happy_var_2))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_195 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_195 = happySpecReduce_2  59 happyReduction_195
happyReduction_195 (HappyAbsSyn75  happy_var_2)
	(HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_2) $ ESel happy_var_1 (thing happy_var_2)
	)
happyReduction_195 _ _  = notHappyAtAll 

happyReduce_196 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_196 = happySpecReduce_2  59 happyReduction_196
happyReduction_196 (HappyAbsSyn75  happy_var_2)
	(HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (at (happy_var_1,happy_var_2) $ ESel happy_var_1 (thing happy_var_2)
	)
happyReduction_196 _ _  = notHappyAtAll 

happyReduce_197 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_197 = happySpecReduce_1  60 happyReduction_197
happyReduction_197 (HappyTerminal (happy_var_1@(Located _ (Token  (Selector _) _))))
	 =  HappyAbsSyn75
		 (mkSelector `fmap` happy_var_1
	)
happyReduction_197 _  = notHappyAtAll 

happyReduce_198 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_198 = happySpecReduce_1  61 happyReduction_198
happyReduction_198 (HappyAbsSyn77  happy_var_1)
	 =  HappyAbsSyn76
		 ([happy_var_1]
	)
happyReduction_198 _  = notHappyAtAll 

happyReduce_199 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_199 = happySpecReduce_3  61 happyReduction_199
happyReduction_199 (HappyAbsSyn77  happy_var_3)
	_
	(HappyAbsSyn76  happy_var_1)
	 =  HappyAbsSyn76
		 (happy_var_3 : happy_var_1
	)
happyReduction_199 _ _ _  = notHappyAtAll 

happyReduce_200 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_200 = happyMonadReduce 1 62 happyReduction_200
happyReduction_200 ((HappyTerminal (happy_var_1@(Located _ (Token (Num   {}) _)))) `HappyStk`
	happyRest) tk
	 = happyThen ((( polyTerm (srcRange happy_var_1) (getNum happy_var_1) 0))
	) (\r -> happyReturn (HappyAbsSyn77 r))

happyReduce_201 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_201 = happyMonadReduce 1 62 happyReduction_201
happyReduction_201 ((HappyTerminal (Located happy_var_1 (Token (KW KW_x)       _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( polyTerm happy_var_1 1 1))
	) (\r -> happyReturn (HappyAbsSyn77 r))

happyReduce_202 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_202 = happyMonadReduce 3 62 happyReduction_202
happyReduction_202 ((HappyTerminal (happy_var_3@(Located _ (Token (Num   {}) _)))) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (KW KW_x)       _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( polyTerm (rComb happy_var_1 (srcRange happy_var_3))
                                                            1 (getNum happy_var_3)))
	) (\r -> happyReturn (HappyAbsSyn77 r))

happyReduce_203 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_203 = happySpecReduce_3  63 happyReduction_203
happyReduction_203 (HappyAbsSyn59  happy_var_3)
	_
	(HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn78
		 ([ happy_var_3, happy_var_1]
	)
happyReduction_203 _ _ _  = notHappyAtAll 

happyReduce_204 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_204 = happySpecReduce_3  63 happyReduction_204
happyReduction_204 (HappyAbsSyn59  happy_var_3)
	_
	(HappyAbsSyn78  happy_var_1)
	 =  HappyAbsSyn78
		 (happy_var_3 : happy_var_1
	)
happyReduction_204 _ _ _  = notHappyAtAll 

happyReduce_205 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_205 = happySpecReduce_3  64 happyReduction_205
happyReduction_205 (HappyAbsSyn80  happy_var_3)
	_
	(HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn79
		 (Left (EUpd (Just happy_var_1) (reverse happy_var_3))
	)
happyReduction_205 _ _ _  = notHappyAtAll 

happyReduce_206 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_206 = happySpecReduce_3  64 happyReduction_206
happyReduction_206 (HappyAbsSyn80  happy_var_3)
	_
	_
	 =  HappyAbsSyn79
		 (Left (EUpd Nothing   (reverse happy_var_3))
	)
happyReduction_206 _ _ _  = notHappyAtAll 

happyReduce_207 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_207 = happyMonadReduce 1 64 happyReduction_207
happyReduction_207 ((HappyAbsSyn80  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( Right `fmap` mapM ufToNamed happy_var_1))
	) (\r -> happyReturn (HappyAbsSyn79 r))

happyReduce_208 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_208 = happySpecReduce_1  65 happyReduction_208
happyReduction_208 (HappyAbsSyn81  happy_var_1)
	 =  HappyAbsSyn80
		 ([happy_var_1]
	)
happyReduction_208 _  = notHappyAtAll 

happyReduce_209 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_209 = happySpecReduce_3  65 happyReduction_209
happyReduction_209 (HappyAbsSyn81  happy_var_3)
	_
	(HappyAbsSyn80  happy_var_1)
	 =  HappyAbsSyn80
		 (happy_var_3 : happy_var_1
	)
happyReduction_209 _ _ _  = notHappyAtAll 

happyReduce_210 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_210 = happyReduce 4 66 happyReduction_210
happyReduction_210 ((HappyAbsSyn59  happy_var_4) `HappyStk`
	(HappyAbsSyn83  happy_var_3) `HappyStk`
	(HappyAbsSyn48  happy_var_2) `HappyStk`
	(HappyAbsSyn82  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn81
		 (UpdField happy_var_3 happy_var_1 (mkIndexedExpr happy_var_2 happy_var_4)
	) `HappyStk` happyRest

happyReduce_211 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_211 = happyMonadReduce 1 67 happyReduction_211
happyReduction_211 ((HappyAbsSyn59  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( exprToFieldPath happy_var_1))
	) (\r -> happyReturn (HappyAbsSyn82 r))

happyReduce_212 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_212 = happySpecReduce_1  68 happyReduction_212
happyReduction_212 _
	 =  HappyAbsSyn83
		 (UpdSet
	)

happyReduce_213 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_213 = happySpecReduce_1  68 happyReduction_213
happyReduction_213 _
	 =  HappyAbsSyn83
		 (UpdFun
	)

happyReduce_214 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_214 = happySpecReduce_3  69 happyReduction_214
happyReduction_214 (HappyAbsSyn85  happy_var_3)
	_
	(HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (EComp happy_var_1 (reverse happy_var_3)
	)
happyReduction_214 _ _ _  = notHappyAtAll 

happyReduce_215 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_215 = happySpecReduce_1  69 happyReduction_215
happyReduction_215 (HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (EList [happy_var_1]
	)
happyReduction_215 _  = notHappyAtAll 

happyReduce_216 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_216 = happySpecReduce_1  69 happyReduction_216
happyReduction_216 (HappyAbsSyn78  happy_var_1)
	 =  HappyAbsSyn59
		 (EList (reverse happy_var_1)
	)
happyReduction_216 _  = notHappyAtAll 

happyReduce_217 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_217 = happyMonadReduce 3 69 happyReduction_217
happyReduction_217 ((HappyAbsSyn59  happy_var_3) `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (Sym DotDot  ) _))) `HappyStk`
	(HappyAbsSyn59  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( eFromTo happy_var_2 happy_var_1 Nothing   happy_var_3))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_218 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_218 = happyMonadReduce 5 69 happyReduction_218
happyReduction_218 ((HappyAbsSyn59  happy_var_5) `HappyStk`
	(HappyTerminal (Located happy_var_4 (Token (Sym DotDot  ) _))) `HappyStk`
	(HappyAbsSyn59  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn59  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( eFromTo happy_var_4 happy_var_1 (Just happy_var_3) happy_var_5))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_219 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_219 = happyMonadReduce 4 69 happyReduction_219
happyReduction_219 ((HappyAbsSyn59  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (Sym DotDot  ) _))) `HappyStk`
	(HappyAbsSyn59  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( eFromToLessThan happy_var_2 happy_var_1 happy_var_4))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_220 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_220 = happyMonadReduce 3 69 happyReduction_220
happyReduction_220 ((HappyAbsSyn59  happy_var_3) `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (Sym DotDotLt) _))) `HappyStk`
	(HappyAbsSyn59  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( eFromToLessThan happy_var_2 happy_var_1 happy_var_3))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_221 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_221 = happyMonadReduce 5 69 happyReduction_221
happyReduction_221 ((HappyAbsSyn59  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn59  happy_var_3) `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (Sym DotDot  ) _))) `HappyStk`
	(HappyAbsSyn59  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( eFromToBy happy_var_2 happy_var_1 happy_var_3 happy_var_5 False))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_222 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_222 = happyMonadReduce 6 69 happyReduction_222
happyReduction_222 ((HappyAbsSyn59  happy_var_6) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn59  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (Sym DotDot  ) _))) `HappyStk`
	(HappyAbsSyn59  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( eFromToBy happy_var_2 happy_var_1 happy_var_4 happy_var_6 True))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_223 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_223 = happyMonadReduce 5 69 happyReduction_223
happyReduction_223 ((HappyAbsSyn59  happy_var_5) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn59  happy_var_3) `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (Sym DotDotLt) _))) `HappyStk`
	(HappyAbsSyn59  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( eFromToBy happy_var_2 happy_var_1 happy_var_3 happy_var_5 True))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_224 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_224 = happyMonadReduce 6 69 happyReduction_224
happyReduction_224 ((HappyAbsSyn59  happy_var_6) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn59  happy_var_3) `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (Sym DotDot  ) _))) `HappyStk`
	(HappyAbsSyn59  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( eFromToDownBy happy_var_2 happy_var_1 happy_var_3 happy_var_6 False))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_225 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_225 = happyMonadReduce 7 69 happyReduction_225
happyReduction_225 ((HappyAbsSyn59  happy_var_7) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn59  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (Sym DotDot  ) _))) `HappyStk`
	(HappyAbsSyn59  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( eFromToDownBy happy_var_2 happy_var_1 happy_var_4 happy_var_7 True))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_226 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_226 = happyMonadReduce 6 69 happyReduction_226
happyReduction_226 ((HappyAbsSyn59  happy_var_6) `HappyStk`
	_ `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn59  happy_var_3) `HappyStk`
	(HappyTerminal (Located happy_var_2 (Token (Sym DotDotGt) _))) `HappyStk`
	(HappyAbsSyn59  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( eFromToDownBy happy_var_2 happy_var_1 happy_var_3 happy_var_6 True))
	) (\r -> happyReturn (HappyAbsSyn59 r))

happyReduce_227 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_227 = happySpecReduce_2  69 happyReduction_227
happyReduction_227 _
	(HappyAbsSyn59  happy_var_1)
	 =  HappyAbsSyn59
		 (EInfFrom happy_var_1 Nothing
	)
happyReduction_227 _ _  = notHappyAtAll 

happyReduce_228 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_228 = happyReduce 4 69 happyReduction_228
happyReduction_228 (_ `HappyStk`
	(HappyAbsSyn59  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn59  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn59
		 (EInfFrom happy_var_1 (Just happy_var_3)
	) `HappyStk` happyRest

happyReduce_229 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_229 = happySpecReduce_1  70 happyReduction_229
happyReduction_229 (HappyAbsSyn86  happy_var_1)
	 =  HappyAbsSyn85
		 ([ reverse happy_var_1 ]
	)
happyReduction_229 _  = notHappyAtAll 

happyReduce_230 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_230 = happySpecReduce_3  70 happyReduction_230
happyReduction_230 (HappyAbsSyn86  happy_var_3)
	_
	(HappyAbsSyn85  happy_var_1)
	 =  HappyAbsSyn85
		 (reverse happy_var_3 : happy_var_1
	)
happyReduction_230 _ _ _  = notHappyAtAll 

happyReduce_231 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_231 = happySpecReduce_1  71 happyReduction_231
happyReduction_231 (HappyAbsSyn87  happy_var_1)
	 =  HappyAbsSyn86
		 ([happy_var_1]
	)
happyReduction_231 _  = notHappyAtAll 

happyReduce_232 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_232 = happySpecReduce_3  71 happyReduction_232
happyReduction_232 (HappyAbsSyn87  happy_var_3)
	_
	(HappyAbsSyn86  happy_var_1)
	 =  HappyAbsSyn86
		 (happy_var_3 : happy_var_1
	)
happyReduction_232 _ _ _  = notHappyAtAll 

happyReduce_233 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_233 = happySpecReduce_3  72 happyReduction_233
happyReduction_233 (HappyAbsSyn59  happy_var_3)
	_
	(HappyAbsSyn88  happy_var_1)
	 =  HappyAbsSyn87
		 (Match happy_var_1 happy_var_3
	)
happyReduction_233 _ _ _  = notHappyAtAll 

happyReduce_234 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_234 = happySpecReduce_3  73 happyReduction_234
happyReduction_234 (HappyAbsSyn103  happy_var_3)
	_
	(HappyAbsSyn88  happy_var_1)
	 =  HappyAbsSyn88
		 (at (happy_var_1,happy_var_3) $ PTyped happy_var_1 happy_var_3
	)
happyReduction_234 _ _ _  = notHappyAtAll 

happyReduce_235 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_235 = happySpecReduce_1  73 happyReduction_235
happyReduction_235 (HappyAbsSyn88  happy_var_1)
	 =  HappyAbsSyn88
		 (happy_var_1
	)
happyReduction_235 _  = notHappyAtAll 

happyReduce_236 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_236 = happySpecReduce_3  74 happyReduction_236
happyReduction_236 (HappyAbsSyn88  happy_var_3)
	_
	(HappyAbsSyn88  happy_var_1)
	 =  HappyAbsSyn88
		 (at (happy_var_1,happy_var_3) $ PSplit happy_var_1 happy_var_3
	)
happyReduction_236 _ _ _  = notHappyAtAll 

happyReduce_237 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_237 = happySpecReduce_1  74 happyReduction_237
happyReduction_237 (HappyAbsSyn88  happy_var_1)
	 =  HappyAbsSyn88
		 (happy_var_1
	)
happyReduction_237 _  = notHappyAtAll 

happyReduce_238 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_238 = happySpecReduce_1  75 happyReduction_238
happyReduction_238 (HappyAbsSyn44  happy_var_1)
	 =  HappyAbsSyn88
		 (PVar happy_var_1
	)
happyReduction_238 _  = notHappyAtAll 

happyReduce_239 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_239 = happySpecReduce_1  75 happyReduction_239
happyReduction_239 (HappyTerminal (Located happy_var_1 (Token (Sym Underscore ) _)))
	 =  HappyAbsSyn88
		 (at happy_var_1       $ PWild
	)
happyReduction_239 _  = notHappyAtAll 

happyReduce_240 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_240 = happySpecReduce_2  75 happyReduction_240
happyReduction_240 (HappyTerminal (Located happy_var_2 (Token (Sym ParenR  ) _)))
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _)))
	 =  HappyAbsSyn88
		 (at (happy_var_1,happy_var_2) $ PTuple []
	)
happyReduction_240 _ _  = notHappyAtAll 

happyReduce_241 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_241 = happySpecReduce_3  75 happyReduction_241
happyReduction_241 (HappyTerminal (Located happy_var_3 (Token (Sym ParenR  ) _)))
	(HappyAbsSyn88  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _)))
	 =  HappyAbsSyn88
		 (at (happy_var_1,happy_var_3)   happy_var_2
	)
happyReduction_241 _ _ _  = notHappyAtAll 

happyReduce_242 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_242 = happySpecReduce_3  75 happyReduction_242
happyReduction_242 (HappyTerminal (Located happy_var_3 (Token (Sym ParenR  ) _)))
	(HappyAbsSyn45  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _)))
	 =  HappyAbsSyn88
		 (at (happy_var_1,happy_var_3) $ PTuple (reverse happy_var_2)
	)
happyReduction_242 _ _ _  = notHappyAtAll 

happyReduce_243 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_243 = happySpecReduce_2  75 happyReduction_243
happyReduction_243 (HappyTerminal (Located happy_var_2 (Token (Sym BracketR) _)))
	(HappyTerminal (Located happy_var_1 (Token (Sym BracketL) _)))
	 =  HappyAbsSyn88
		 (at (happy_var_1,happy_var_2) $ PList []
	)
happyReduction_243 _ _  = notHappyAtAll 

happyReduce_244 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_244 = happySpecReduce_3  75 happyReduction_244
happyReduction_244 (HappyTerminal (Located happy_var_3 (Token (Sym BracketR) _)))
	(HappyAbsSyn88  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym BracketL) _)))
	 =  HappyAbsSyn88
		 (at (happy_var_1,happy_var_3) $ PList [happy_var_2]
	)
happyReduction_244 _ _ _  = notHappyAtAll 

happyReduce_245 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_245 = happySpecReduce_3  75 happyReduction_245
happyReduction_245 (HappyTerminal (Located happy_var_3 (Token (Sym BracketR) _)))
	(HappyAbsSyn45  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym BracketL) _)))
	 =  HappyAbsSyn88
		 (at (happy_var_1,happy_var_3) $ PList (reverse happy_var_2)
	)
happyReduction_245 _ _ _  = notHappyAtAll 

happyReduce_246 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_246 = happyMonadReduce 2 75 happyReduction_246
happyReduction_246 ((HappyTerminal (Located happy_var_2 (Token (Sym CurlyR  ) _))) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkRecord (rComb happy_var_1 happy_var_2) PRecord []))
	) (\r -> happyReturn (HappyAbsSyn88 r))

happyReduce_247 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_247 = happyMonadReduce 3 75 happyReduction_247
happyReduction_247 ((HappyTerminal (Located happy_var_3 (Token (Sym CurlyR  ) _))) `HappyStk`
	(HappyAbsSyn93  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkRecord (rComb happy_var_1 happy_var_3) PRecord happy_var_2))
	) (\r -> happyReturn (HappyAbsSyn88 r))

happyReduce_248 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_248 = happySpecReduce_3  76 happyReduction_248
happyReduction_248 (HappyAbsSyn88  happy_var_3)
	_
	(HappyAbsSyn88  happy_var_1)
	 =  HappyAbsSyn45
		 ([happy_var_3, happy_var_1]
	)
happyReduction_248 _ _ _  = notHappyAtAll 

happyReduce_249 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_249 = happySpecReduce_3  76 happyReduction_249
happyReduction_249 (HappyAbsSyn88  happy_var_3)
	_
	(HappyAbsSyn45  happy_var_1)
	 =  HappyAbsSyn45
		 (happy_var_3 : happy_var_1
	)
happyReduction_249 _ _ _  = notHappyAtAll 

happyReduce_250 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_250 = happySpecReduce_3  77 happyReduction_250
happyReduction_250 (HappyAbsSyn88  happy_var_3)
	_
	(HappyAbsSyn112  happy_var_1)
	 =  HappyAbsSyn92
		 (Named { name = happy_var_1, value = happy_var_3 }
	)
happyReduction_250 _ _ _  = notHappyAtAll 

happyReduce_251 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_251 = happySpecReduce_1  78 happyReduction_251
happyReduction_251 (HappyAbsSyn92  happy_var_1)
	 =  HappyAbsSyn93
		 ([happy_var_1]
	)
happyReduction_251 _  = notHappyAtAll 

happyReduce_252 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_252 = happySpecReduce_3  78 happyReduction_252
happyReduction_252 (HappyAbsSyn92  happy_var_3)
	_
	(HappyAbsSyn93  happy_var_1)
	 =  HappyAbsSyn93
		 (happy_var_3 : happy_var_1
	)
happyReduction_252 _ _ _  = notHappyAtAll 

happyReduce_253 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_253 = happySpecReduce_1  79 happyReduction_253
happyReduction_253 (HappyAbsSyn103  happy_var_1)
	 =  HappyAbsSyn94
		 (at happy_var_1 $ mkSchema [] [] happy_var_1
	)
happyReduction_253 _  = notHappyAtAll 

happyReduce_254 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_254 = happySpecReduce_2  79 happyReduction_254
happyReduction_254 (HappyAbsSyn103  happy_var_2)
	(HappyAbsSyn95  happy_var_1)
	 =  HappyAbsSyn94
		 (at (happy_var_1,happy_var_2) $ mkSchema (thing happy_var_1) [] happy_var_2
	)
happyReduction_254 _ _  = notHappyAtAll 

happyReduce_255 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_255 = happySpecReduce_2  79 happyReduction_255
happyReduction_255 (HappyAbsSyn103  happy_var_2)
	(HappyAbsSyn96  happy_var_1)
	 =  HappyAbsSyn94
		 (at (happy_var_1,happy_var_2) $ mkSchema [] (thing happy_var_1) happy_var_2
	)
happyReduction_255 _ _  = notHappyAtAll 

happyReduce_256 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_256 = happySpecReduce_3  79 happyReduction_256
happyReduction_256 (HappyAbsSyn103  happy_var_3)
	(HappyAbsSyn96  happy_var_2)
	(HappyAbsSyn95  happy_var_1)
	 =  HappyAbsSyn94
		 (at (happy_var_1,happy_var_3) $ mkSchema (thing happy_var_1)
                                                          (thing happy_var_2) happy_var_3
	)
happyReduction_256 _ _ _  = notHappyAtAll 

happyReduce_257 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_257 = happySpecReduce_2  80 happyReduction_257
happyReduction_257 (HappyTerminal (Located happy_var_2 (Token (Sym CurlyR  ) _)))
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _)))
	 =  HappyAbsSyn95
		 (Located (rComb happy_var_1 happy_var_2) []
	)
happyReduction_257 _ _  = notHappyAtAll 

happyReduce_258 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_258 = happySpecReduce_3  80 happyReduction_258
happyReduction_258 (HappyTerminal (Located happy_var_3 (Token (Sym CurlyR  ) _)))
	(HappyAbsSyn100  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _)))
	 =  HappyAbsSyn95
		 (Located (rComb happy_var_1 happy_var_3) (reverse happy_var_2)
	)
happyReduction_258 _ _ _  = notHappyAtAll 

happyReduce_259 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_259 = happySpecReduce_2  81 happyReduction_259
happyReduction_259 (HappyAbsSyn96  happy_var_2)
	(HappyAbsSyn96  happy_var_1)
	 =  HappyAbsSyn96
		 (at (happy_var_1,happy_var_2) $ fmap (++ thing happy_var_2) happy_var_1
	)
happyReduction_259 _ _  = notHappyAtAll 

happyReduce_260 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_260 = happySpecReduce_1  81 happyReduction_260
happyReduction_260 (HappyAbsSyn96  happy_var_1)
	 =  HappyAbsSyn96
		 (happy_var_1
	)
happyReduction_260 _  = notHappyAtAll 

happyReduce_261 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_261 = happyMonadReduce 2 82 happyReduction_261
happyReduction_261 ((HappyTerminal (Located happy_var_2 (Token (Sym FatArrR ) _))) `HappyStk`
	(HappyAbsSyn103  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( fmap (\x -> at (x,happy_var_2) x) (mkProp happy_var_1)))
	) (\r -> happyReturn (HappyAbsSyn96 r))

happyReduce_262 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_262 = happySpecReduce_1  83 happyReduction_262
happyReduction_262 (HappyTerminal (Located happy_var_1 (Token (Op Hash) _)))
	 =  HappyAbsSyn98
		 (Located happy_var_1 KNum
	)
happyReduction_262 _  = notHappyAtAll 

happyReduce_263 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_263 = happySpecReduce_1  83 happyReduction_263
happyReduction_263 (HappyTerminal (Located happy_var_1 (Token (Op Mul)   _)))
	 =  HappyAbsSyn98
		 (Located happy_var_1 KType
	)
happyReduction_263 _  = notHappyAtAll 

happyReduce_264 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_264 = happySpecReduce_1  83 happyReduction_264
happyReduction_264 (HappyTerminal (Located happy_var_1 (Token (KW KW_Prop) _)))
	 =  HappyAbsSyn98
		 (Located happy_var_1 KProp
	)
happyReduction_264 _  = notHappyAtAll 

happyReduce_265 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_265 = happySpecReduce_3  83 happyReduction_265
happyReduction_265 (HappyAbsSyn98  happy_var_3)
	_
	(HappyAbsSyn98  happy_var_1)
	 =  HappyAbsSyn98
		 (combLoc KFun happy_var_1 happy_var_3
	)
happyReduction_265 _ _ _  = notHappyAtAll 

happyReduce_266 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_266 = happyMonadReduce 1 84 happyReduction_266
happyReduction_266 ((HappyAbsSyn112  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkTParam happy_var_1 Nothing))
	) (\r -> happyReturn (HappyAbsSyn99 r))

happyReduce_267 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_267 = happyMonadReduce 3 84 happyReduction_267
happyReduction_267 ((HappyAbsSyn98  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn112  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkTParam (at (happy_var_1,happy_var_3) happy_var_1) (Just (thing happy_var_3))))
	) (\r -> happyReturn (HappyAbsSyn99 r))

happyReduce_268 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_268 = happySpecReduce_1  85 happyReduction_268
happyReduction_268 (HappyAbsSyn99  happy_var_1)
	 =  HappyAbsSyn100
		 ([happy_var_1]
	)
happyReduction_268 _  = notHappyAtAll 

happyReduce_269 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_269 = happySpecReduce_3  85 happyReduction_269
happyReduction_269 (HappyAbsSyn99  happy_var_3)
	_
	(HappyAbsSyn100  happy_var_1)
	 =  HappyAbsSyn100
		 (happy_var_3 : happy_var_1
	)
happyReduction_269 _ _ _  = notHappyAtAll 

happyReduce_270 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_270 = happyMonadReduce 1 86 happyReduction_270
happyReduction_270 ((HappyAbsSyn112  happy_var_1) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkTParam happy_var_1 Nothing))
	) (\r -> happyReturn (HappyAbsSyn99 r))

happyReduce_271 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_271 = happyMonadReduce 5 86 happyReduction_271
happyReduction_271 ((HappyTerminal (Located happy_var_5 (Token (Sym ParenR  ) _))) `HappyStk`
	(HappyAbsSyn98  happy_var_4) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn112  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkTParam (at (happy_var_1,happy_var_5) happy_var_2) (Just (thing happy_var_4))))
	) (\r -> happyReturn (HappyAbsSyn99 r))

happyReduce_272 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_272 = happySpecReduce_1  87 happyReduction_272
happyReduction_272 (HappyAbsSyn99  happy_var_1)
	 =  HappyAbsSyn100
		 ([happy_var_1]
	)
happyReduction_272 _  = notHappyAtAll 

happyReduce_273 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_273 = happySpecReduce_2  87 happyReduction_273
happyReduction_273 (HappyAbsSyn99  happy_var_2)
	(HappyAbsSyn100  happy_var_1)
	 =  HappyAbsSyn100
		 (happy_var_2 : happy_var_1
	)
happyReduction_273 _ _  = notHappyAtAll 

happyReduce_274 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_274 = happySpecReduce_3  88 happyReduction_274
happyReduction_274 (HappyAbsSyn103  happy_var_3)
	_
	(HappyAbsSyn103  happy_var_1)
	 =  HappyAbsSyn103
		 (at (happy_var_1,happy_var_3) $ TFun happy_var_1 happy_var_3
	)
happyReduction_274 _ _ _  = notHappyAtAll 

happyReduce_275 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_275 = happySpecReduce_1  88 happyReduction_275
happyReduction_275 (HappyAbsSyn103  happy_var_1)
	 =  HappyAbsSyn103
		 (happy_var_1
	)
happyReduction_275 _  = notHappyAtAll 

happyReduce_276 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_276 = happySpecReduce_3  89 happyReduction_276
happyReduction_276 (HappyAbsSyn103  happy_var_3)
	(HappyAbsSyn44  happy_var_2)
	(HappyAbsSyn103  happy_var_1)
	 =  HappyAbsSyn103
		 (at (happy_var_1,happy_var_3) $ TInfix happy_var_1 happy_var_2 defaultFixity happy_var_3
	)
happyReduction_276 _ _ _  = notHappyAtAll 

happyReduce_277 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_277 = happySpecReduce_1  89 happyReduction_277
happyReduction_277 (HappyAbsSyn103  happy_var_1)
	 =  HappyAbsSyn103
		 (happy_var_1
	)
happyReduction_277 _  = notHappyAtAll 

happyReduce_278 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_278 = happySpecReduce_2  90 happyReduction_278
happyReduction_278 (HappyAbsSyn103  happy_var_2)
	(HappyAbsSyn108  happy_var_1)
	 =  HappyAbsSyn103
		 (at (happy_var_1,happy_var_2) $ foldr TSeq happy_var_2 (reverse (thing happy_var_1))
	)
happyReduction_278 _ _  = notHappyAtAll 

happyReduce_279 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_279 = happySpecReduce_2  90 happyReduction_279
happyReduction_279 (HappyAbsSyn107  happy_var_2)
	(HappyAbsSyn116  happy_var_1)
	 =  HappyAbsSyn103
		 (at (happy_var_1,head happy_var_2)
                                     $ TUser (thing happy_var_1) (reverse happy_var_2)
	)
happyReduction_279 _ _  = notHappyAtAll 

happyReduce_280 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_280 = happySpecReduce_1  90 happyReduction_280
happyReduction_280 (HappyAbsSyn103  happy_var_1)
	 =  HappyAbsSyn103
		 (happy_var_1
	)
happyReduction_280 _  = notHappyAtAll 

happyReduce_281 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_281 = happySpecReduce_1  91 happyReduction_281
happyReduction_281 (HappyAbsSyn116  happy_var_1)
	 =  HappyAbsSyn103
		 (at happy_var_1 $ TUser (thing happy_var_1) []
	)
happyReduction_281 _  = notHappyAtAll 

happyReduce_282 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_282 = happySpecReduce_3  91 happyReduction_282
happyReduction_282 _
	(HappyAbsSyn44  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _)))
	 =  HappyAbsSyn103
		 (at happy_var_1 $ TUser (thing happy_var_2) []
	)
happyReduction_282 _ _ _  = notHappyAtAll 

happyReduce_283 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_283 = happySpecReduce_1  91 happyReduction_283
happyReduction_283 (HappyTerminal (happy_var_1@(Located _ (Token (Num   {}) _))))
	 =  HappyAbsSyn103
		 (at happy_var_1 $ TNum  (getNum happy_var_1)
	)
happyReduction_283 _  = notHappyAtAll 

happyReduce_284 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_284 = happySpecReduce_1  91 happyReduction_284
happyReduction_284 (HappyTerminal (happy_var_1@(Located _ (Token (ChrLit {}) _))))
	 =  HappyAbsSyn103
		 (at happy_var_1 $ TChar (getChr happy_var_1)
	)
happyReduction_284 _  = notHappyAtAll 

happyReduce_285 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_285 = happySpecReduce_3  91 happyReduction_285
happyReduction_285 (HappyTerminal (Located happy_var_3 (Token (Sym BracketR) _)))
	(HappyAbsSyn103  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym BracketL) _)))
	 =  HappyAbsSyn103
		 (at (happy_var_1,happy_var_3) $ TSeq happy_var_2 TBit
	)
happyReduction_285 _ _ _  = notHappyAtAll 

happyReduce_286 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_286 = happySpecReduce_3  91 happyReduction_286
happyReduction_286 (HappyTerminal (Located happy_var_3 (Token (Sym ParenR  ) _)))
	(HappyAbsSyn103  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _)))
	 =  HappyAbsSyn103
		 (at (happy_var_1,happy_var_3) $ TParens happy_var_2
	)
happyReduction_286 _ _ _  = notHappyAtAll 

happyReduce_287 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_287 = happySpecReduce_2  91 happyReduction_287
happyReduction_287 (HappyTerminal (Located happy_var_2 (Token (Sym ParenR  ) _)))
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _)))
	 =  HappyAbsSyn103
		 (at (happy_var_1,happy_var_2) $ TTuple []
	)
happyReduction_287 _ _  = notHappyAtAll 

happyReduce_288 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_288 = happySpecReduce_3  91 happyReduction_288
happyReduction_288 (HappyTerminal (Located happy_var_3 (Token (Sym ParenR  ) _)))
	(HappyAbsSyn109  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _)))
	 =  HappyAbsSyn103
		 (at (happy_var_1,happy_var_3) $ TTuple  (reverse happy_var_2)
	)
happyReduction_288 _ _ _  = notHappyAtAll 

happyReduce_289 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_289 = happyMonadReduce 2 91 happyReduction_289
happyReduction_289 ((HappyTerminal (Located happy_var_2 (Token (Sym CurlyR  ) _))) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkRecord (rComb happy_var_1 happy_var_2) TRecord []))
	) (\r -> happyReturn (HappyAbsSyn103 r))

happyReduce_290 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_290 = happyMonadReduce 3 91 happyReduction_290
happyReduction_290 ((HappyTerminal (Located happy_var_3 (Token (Sym CurlyR  ) _))) `HappyStk`
	(HappyAbsSyn111  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( mkRecord (rComb happy_var_1 happy_var_3) TRecord happy_var_2))
	) (\r -> happyReturn (HappyAbsSyn103 r))

happyReduce_291 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_291 = happySpecReduce_1  91 happyReduction_291
happyReduction_291 (HappyTerminal (Located happy_var_1 (Token (Sym Underscore ) _)))
	 =  HappyAbsSyn103
		 (at happy_var_1 TWild
	)
happyReduction_291 _  = notHappyAtAll 

happyReduce_292 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_292 = happySpecReduce_1  92 happyReduction_292
happyReduction_292 (HappyAbsSyn103  happy_var_1)
	 =  HappyAbsSyn107
		 ([ happy_var_1 ]
	)
happyReduction_292 _  = notHappyAtAll 

happyReduce_293 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_293 = happySpecReduce_2  92 happyReduction_293
happyReduction_293 (HappyAbsSyn103  happy_var_2)
	(HappyAbsSyn107  happy_var_1)
	 =  HappyAbsSyn107
		 (happy_var_2 : happy_var_1
	)
happyReduction_293 _ _  = notHappyAtAll 

happyReduce_294 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_294 = happySpecReduce_3  93 happyReduction_294
happyReduction_294 (HappyTerminal (Located happy_var_3 (Token (Sym BracketR) _)))
	(HappyAbsSyn103  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym BracketL) _)))
	 =  HappyAbsSyn108
		 (Located (rComb happy_var_1 happy_var_3) [ happy_var_2 ]
	)
happyReduction_294 _ _ _  = notHappyAtAll 

happyReduce_295 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_295 = happyReduce 4 93 happyReduction_295
happyReduction_295 ((HappyTerminal (Located happy_var_4 (Token (Sym BracketR) _))) `HappyStk`
	(HappyAbsSyn103  happy_var_3) `HappyStk`
	_ `HappyStk`
	(HappyAbsSyn108  happy_var_1) `HappyStk`
	happyRest)
	 = HappyAbsSyn108
		 (at (happy_var_1,happy_var_4) (fmap (happy_var_3 :) happy_var_1)
	) `HappyStk` happyRest

happyReduce_296 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_296 = happySpecReduce_3  94 happyReduction_296
happyReduction_296 (HappyAbsSyn103  happy_var_3)
	_
	(HappyAbsSyn103  happy_var_1)
	 =  HappyAbsSyn109
		 ([ happy_var_3, happy_var_1]
	)
happyReduction_296 _ _ _  = notHappyAtAll 

happyReduce_297 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_297 = happySpecReduce_3  94 happyReduction_297
happyReduction_297 (HappyAbsSyn103  happy_var_3)
	_
	(HappyAbsSyn109  happy_var_1)
	 =  HappyAbsSyn109
		 (happy_var_3 : happy_var_1
	)
happyReduction_297 _ _ _  = notHappyAtAll 

happyReduce_298 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_298 = happySpecReduce_3  95 happyReduction_298
happyReduction_298 (HappyAbsSyn103  happy_var_3)
	_
	(HappyAbsSyn112  happy_var_1)
	 =  HappyAbsSyn110
		 (Named { name = happy_var_1, value = happy_var_3 }
	)
happyReduction_298 _ _ _  = notHappyAtAll 

happyReduce_299 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_299 = happySpecReduce_1  96 happyReduction_299
happyReduction_299 (HappyAbsSyn110  happy_var_1)
	 =  HappyAbsSyn111
		 ([happy_var_1]
	)
happyReduction_299 _  = notHappyAtAll 

happyReduce_300 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_300 = happySpecReduce_3  96 happyReduction_300
happyReduction_300 (HappyAbsSyn110  happy_var_3)
	_
	(HappyAbsSyn111  happy_var_1)
	 =  HappyAbsSyn111
		 (happy_var_3 : happy_var_1
	)
happyReduction_300 _ _ _  = notHappyAtAll 

happyReduce_301 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_301 = happySpecReduce_1  97 happyReduction_301
happyReduction_301 (HappyTerminal (happy_var_1@(Located _ (Token (Ident [] _) _))))
	 =  HappyAbsSyn112
		 (let Token (Ident _ str) _ = thing happy_var_1
                         in happy_var_1 { thing = mkIdent str }
	)
happyReduction_301 _  = notHappyAtAll 

happyReduce_302 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_302 = happySpecReduce_1  97 happyReduction_302
happyReduction_302 (HappyTerminal (Located happy_var_1 (Token (KW KW_x)       _)))
	 =  HappyAbsSyn112
		 (Located { srcRange = happy_var_1, thing = mkIdent "x" }
	)
happyReduction_302 _  = notHappyAtAll 

happyReduce_303 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_303 = happySpecReduce_1  97 happyReduction_303
happyReduction_303 (HappyTerminal (Located happy_var_1 (Token (KW KW_private)   _)))
	 =  HappyAbsSyn112
		 (Located { srcRange = happy_var_1, thing = mkIdent "private" }
	)
happyReduction_303 _  = notHappyAtAll 

happyReduce_304 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_304 = happySpecReduce_1  97 happyReduction_304
happyReduction_304 (HappyTerminal (Located happy_var_1 (Token (KW KW_as)        _)))
	 =  HappyAbsSyn112
		 (Located { srcRange = happy_var_1, thing = mkIdent "as" }
	)
happyReduction_304 _  = notHappyAtAll 

happyReduce_305 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_305 = happySpecReduce_1  97 happyReduction_305
happyReduction_305 (HappyTerminal (Located happy_var_1 (Token (KW KW_hiding)    _)))
	 =  HappyAbsSyn112
		 (Located { srcRange = happy_var_1, thing = mkIdent "hiding" }
	)
happyReduction_305 _  = notHappyAtAll 

happyReduce_306 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_306 = happySpecReduce_1  98 happyReduction_306
happyReduction_306 (HappyAbsSyn112  happy_var_1)
	 =  HappyAbsSyn44
		 (fmap mkUnqual happy_var_1
	)
happyReduction_306 _  = notHappyAtAll 

happyReduce_307 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_307 = happySpecReduce_1  99 happyReduction_307
happyReduction_307 (HappyAbsSyn112  happy_var_1)
	 =  HappyAbsSyn114
		 (fmap (mkModName . (:[]) . identText) happy_var_1
	)
happyReduction_307 _  = notHappyAtAll 

happyReduce_308 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_308 = happySpecReduce_1  99 happyReduction_308
happyReduction_308 (HappyTerminal (happy_var_1@(Located _ (Token  Ident{}     _))))
	 =  HappyAbsSyn114
		 (let Token (Ident ns i) _ = thing happy_var_1
                                     in mkModName (ns ++ [i]) A.<$ happy_var_1
	)
happyReduction_308 _  = notHappyAtAll 

happyReduce_309 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_309 = happySpecReduce_1  100 happyReduction_309
happyReduction_309 (HappyAbsSyn114  happy_var_1)
	 =  HappyAbsSyn114
		 (happy_var_1
	)
happyReduction_309 _  = notHappyAtAll 

happyReduce_310 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_310 = happySpecReduce_2  100 happyReduction_310
happyReduction_310 (HappyAbsSyn114  happy_var_2)
	_
	 =  HappyAbsSyn114
		 (fmap paramInstModName happy_var_2
	)
happyReduction_310 _ _  = notHappyAtAll 

happyReduce_311 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_311 = happySpecReduce_1  101 happyReduction_311
happyReduction_311 (HappyAbsSyn44  happy_var_1)
	 =  HappyAbsSyn116
		 (happy_var_1
	)
happyReduction_311 _  = notHappyAtAll 

happyReduce_312 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_312 = happySpecReduce_1  101 happyReduction_312
happyReduction_312 (HappyTerminal (happy_var_1@(Located _ (Token  Ident{}     _))))
	 =  HappyAbsSyn116
		 (let Token (Ident ns i) _ = thing happy_var_1
                                     in mkQual (mkModName ns) (mkIdent i) A.<$ happy_var_1
	)
happyReduction_312 _  = notHappyAtAll 

happyReduce_313 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_313 = happySpecReduce_1  102 happyReduction_313
happyReduction_313 (HappyAbsSyn116  happy_var_1)
	 =  HappyAbsSyn116
		 (happy_var_1
	)
happyReduction_313 _  = notHappyAtAll 

happyReduce_314 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_314 = happySpecReduce_1  102 happyReduction_314
happyReduction_314 (HappyAbsSyn44  happy_var_1)
	 =  HappyAbsSyn116
		 (happy_var_1
	)
happyReduction_314 _  = notHappyAtAll 

happyReduce_315 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_315 = happySpecReduce_3  102 happyReduction_315
happyReduction_315 _
	(HappyAbsSyn44  happy_var_2)
	_
	 =  HappyAbsSyn116
		 (happy_var_2
	)
happyReduction_315 _ _ _  = notHappyAtAll 

happyReduce_316 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_316 = happySpecReduce_1  103 happyReduction_316
happyReduction_316 (HappyAbsSyn116  happy_var_1)
	 =  HappyAbsSyn103
		 (at happy_var_1 $ TUser (thing happy_var_1) []
	)
happyReduction_316 _  = notHappyAtAll 

happyReduce_317 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_317 = happySpecReduce_1  103 happyReduction_317
happyReduction_317 (HappyTerminal (happy_var_1@(Located _ (Token (Num   {}) _))))
	 =  HappyAbsSyn103
		 (at happy_var_1 $ TNum  (getNum happy_var_1)
	)
happyReduction_317 _  = notHappyAtAll 

happyReduce_318 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_318 = happyMonadReduce 3 103 happyReduction_318
happyReduction_318 ((HappyTerminal (Located happy_var_3 (Token (Sym ParenR  ) _))) `HappyStk`
	(HappyAbsSyn103  happy_var_2) `HappyStk`
	(HappyTerminal (Located happy_var_1 (Token (Sym ParenL  ) _))) `HappyStk`
	happyRest) tk
	 = happyThen ((( validDemotedType (rComb happy_var_1 happy_var_3) happy_var_2))
	) (\r -> happyReturn (HappyAbsSyn103 r))

happyReduce_319 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_319 = happySpecReduce_2  103 happyReduction_319
happyReduction_319 (HappyTerminal (Located happy_var_2 (Token (Sym CurlyR  ) _)))
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _)))
	 =  HappyAbsSyn103
		 (at (happy_var_1,happy_var_2) (TTyApp [])
	)
happyReduction_319 _ _  = notHappyAtAll 

happyReduce_320 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_320 = happySpecReduce_3  103 happyReduction_320
happyReduction_320 (HappyTerminal (Located happy_var_3 (Token (Sym CurlyR  ) _)))
	(HappyAbsSyn111  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _)))
	 =  HappyAbsSyn103
		 (at (happy_var_1,happy_var_3) (TTyApp (reverse happy_var_2))
	)
happyReduction_320 _ _ _  = notHappyAtAll 

happyReduce_321 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_321 = happySpecReduce_3  103 happyReduction_321
happyReduction_321 (HappyTerminal (Located happy_var_3 (Token (Sym CurlyR  ) _)))
	(HappyAbsSyn103  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _)))
	 =  HappyAbsSyn103
		 (anonTyApp (getLoc (happy_var_1,happy_var_3)) [happy_var_2]
	)
happyReduction_321 _ _ _  = notHappyAtAll 

happyReduce_322 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_322 = happySpecReduce_3  103 happyReduction_322
happyReduction_322 (HappyTerminal (Located happy_var_3 (Token (Sym CurlyR  ) _)))
	(HappyAbsSyn109  happy_var_2)
	(HappyTerminal (Located happy_var_1 (Token (Sym CurlyL  ) _)))
	 =  HappyAbsSyn103
		 (anonTyApp (getLoc (happy_var_1,happy_var_3)) (reverse happy_var_2)
	)
happyReduction_322 _ _ _  = notHappyAtAll 

happyReduce_323 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_323 = happySpecReduce_3  104 happyReduction_323
happyReduction_323 (HappyAbsSyn103  happy_var_3)
	_
	(HappyAbsSyn112  happy_var_1)
	 =  HappyAbsSyn110
		 (Named { name = happy_var_1, value = happy_var_3 }
	)
happyReduction_323 _ _ _  = notHappyAtAll 

happyReduce_324 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_324 = happySpecReduce_1  105 happyReduction_324
happyReduction_324 (HappyAbsSyn110  happy_var_1)
	 =  HappyAbsSyn111
		 ([happy_var_1]
	)
happyReduction_324 _  = notHappyAtAll 

happyReduce_325 :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )
happyReduce_325 = happySpecReduce_3  105 happyReduction_325
happyReduction_325 (HappyAbsSyn110  happy_var_3)
	_
	(HappyAbsSyn111  happy_var_1)
	 =  HappyAbsSyn111
		 (happy_var_3 : happy_var_1
	)
happyReduction_325 _ _ _  = notHappyAtAll 

happyNewToken action sts stk
	= lexerP(\tk -> 
	let cont i = happyDoAction i tk action sts stk in
	case tk of {
	Located _ (Token EOF _) -> happyDoAction 72 tk action sts stk;
	happy_dollar_dollar@(Located _ (Token (Num   {}) _)) -> cont 1;
	happy_dollar_dollar@(Located _ (Token (Frac  {}) _)) -> cont 2;
	happy_dollar_dollar@(Located _ (Token (StrLit {}) _)) -> cont 3;
	happy_dollar_dollar@(Located _ (Token (ChrLit {}) _)) -> cont 4;
	happy_dollar_dollar@(Located _ (Token (Ident [] _) _)) -> cont 5;
	happy_dollar_dollar@(Located _ (Token  Ident{}     _)) -> cont 6;
	happy_dollar_dollar@(Located _ (Token  (Selector _) _)) -> cont 7;
	Located happy_dollar_dollar (Token (KW KW_include)   _) -> cont 8;
	Located happy_dollar_dollar (Token (KW KW_import)    _) -> cont 9;
	Located happy_dollar_dollar (Token (KW KW_as)        _) -> cont 10;
	Located happy_dollar_dollar (Token (KW KW_hiding)    _) -> cont 11;
	Located happy_dollar_dollar (Token (KW KW_private)   _) -> cont 12;
	Located happy_dollar_dollar (Token (KW KW_parameter) _) -> cont 13;
	Located happy_dollar_dollar (Token (KW KW_property)  _) -> cont 14;
	Located happy_dollar_dollar (Token (KW KW_infix)     _) -> cont 15;
	Located happy_dollar_dollar (Token (KW KW_infixl)    _) -> cont 16;
	Located happy_dollar_dollar (Token (KW KW_infixr)    _) -> cont 17;
	Located happy_dollar_dollar (Token (KW KW_type   ) _) -> cont 18;
	Located happy_dollar_dollar (Token (KW KW_newtype) _) -> cont 19;
	Located happy_dollar_dollar (Token (KW KW_module ) _) -> cont 20;
	Located happy_dollar_dollar (Token (KW KW_submodule ) _) -> cont 21;
	Located happy_dollar_dollar (Token (KW KW_where  ) _) -> cont 22;
	Located happy_dollar_dollar (Token (KW KW_let    ) _) -> cont 23;
	Located happy_dollar_dollar (Token (KW KW_if     ) _) -> cont 24;
	Located happy_dollar_dollar (Token (KW KW_then   ) _) -> cont 25;
	Located happy_dollar_dollar (Token (KW KW_else   ) _) -> cont 26;
	Located happy_dollar_dollar (Token (KW KW_x)       _) -> cont 27;
	Located happy_dollar_dollar (Token (KW KW_down)    _) -> cont 28;
	Located happy_dollar_dollar (Token (KW KW_by)      _) -> cont 29;
	Located happy_dollar_dollar (Token (KW KW_primitive) _) -> cont 30;
	Located happy_dollar_dollar (Token (KW KW_constraint) _) -> cont 31;
	Located happy_dollar_dollar (Token (KW KW_Prop) _) -> cont 32;
	Located happy_dollar_dollar (Token (KW KW_propguards)) -> cont 33;
	Located happy_dollar_dollar (Token (Sym BracketL) _) -> cont 34;
	Located happy_dollar_dollar (Token (Sym BracketR) _) -> cont 35;
	Located happy_dollar_dollar (Token (Sym ArrL    ) _) -> cont 36;
	Located happy_dollar_dollar (Token (Sym DotDot  ) _) -> cont 37;
	Located happy_dollar_dollar (Token (Sym DotDotDot) _) -> cont 38;
	Located happy_dollar_dollar (Token (Sym DotDotLt) _) -> cont 39;
	Located happy_dollar_dollar (Token (Sym DotDotGt) _) -> cont 40;
	Located happy_dollar_dollar (Token (Sym Bar     ) _) -> cont 41;
	Located happy_dollar_dollar (Token (Sym Lt      ) _) -> cont 42;
	Located happy_dollar_dollar (Token (Sym Gt      ) _) -> cont 43;
	Located happy_dollar_dollar (Token (Sym ParenL  ) _) -> cont 44;
	Located happy_dollar_dollar (Token (Sym ParenR  ) _) -> cont 45;
	Located happy_dollar_dollar (Token (Sym Comma   ) _) -> cont 46;
	Located happy_dollar_dollar (Token (Sym Semi    ) _) -> cont 47;
	Located happy_dollar_dollar (Token (Sym CurlyL  ) _) -> cont 48;
	Located happy_dollar_dollar (Token (Sym CurlyR  ) _) -> cont 49;
	Located happy_dollar_dollar (Token (Sym TriL    ) _) -> cont 50;
	Located happy_dollar_dollar (Token (Sym TriR    ) _) -> cont 51;
	Located happy_dollar_dollar (Token (Sym EqDef   ) _) -> cont 52;
	Located happy_dollar_dollar (Token (Sym BackTick) _) -> cont 53;
	Located happy_dollar_dollar (Token (Sym Colon   ) _) -> cont 54;
	Located happy_dollar_dollar (Token (Sym ArrR    ) _) -> cont 55;
	Located happy_dollar_dollar (Token (Sym FatArrR ) _) -> cont 56;
	Located happy_dollar_dollar (Token (Sym Lambda  ) _) -> cont 57;
	Located happy_dollar_dollar (Token (Sym Underscore ) _) -> cont 58;
	Located happy_dollar_dollar (Token (Virt VCurlyL)  _) -> cont 59;
	Located happy_dollar_dollar (Token (Virt VCurlyR)  _) -> cont 60;
	Located happy_dollar_dollar (Token (Virt VSemi)    _) -> cont 61;
	Located happy_dollar_dollar (Token (Op Plus)  _) -> cont 62;
	Located happy_dollar_dollar (Token (Op Mul)   _) -> cont 63;
	Located happy_dollar_dollar (Token (Op Exp)   _) -> cont 64;
	Located happy_dollar_dollar (Token (Op Minus) _) -> cont 65;
	Located happy_dollar_dollar (Token (Op Complement) _) -> cont 66;
	Located happy_dollar_dollar (Token (Op Hash) _) -> cont 67;
	Located happy_dollar_dollar (Token (Op At) _) -> cont 68;
	happy_dollar_dollar@(Located _ (Token (Op (Other [] _)) _)) -> cont 69;
	happy_dollar_dollar@(Located _ (Token (Op  Other{}   )  _)) -> cont 70;
	happy_dollar_dollar@(Located _ (Token (White DocStr) _)) -> cont 71;
	_ -> happyError' (tk, [])
	})

happyError_ explist 72 tk = happyError' (tk, explist)
happyError_ explist _ tk = happyError' (tk, explist)

happyThen :: () => ParseM a -> (a -> ParseM b) -> ParseM b
happyThen = (Prelude.>>=)
happyReturn :: () => a -> ParseM a
happyReturn = (Prelude.return)
happyParse :: () => Prelude.Int -> ParseM (HappyAbsSyn )

happyNewToken :: () => Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )

happyDoAction :: () => Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn )

happyReduceArr :: () => Happy_Data_Array.Array Prelude.Int (Prelude.Int -> Located Token -> Prelude.Int -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> ParseM (HappyAbsSyn ))

happyThen1 :: () => ParseM a -> (a -> ParseM b) -> ParseM b
happyThen1 = happyThen
happyReturn1 :: () => a -> ParseM a
happyReturn1 = happyReturn
happyError' :: () => ((Located Token), [Prelude.String]) -> ParseM a
happyError' tk = (\(tokens, explist) -> happyError) tk
vmodule = happySomeParser where
 happySomeParser = happyThen (happyParse 0) (\x -> case x of {HappyAbsSyn15 z -> happyReturn z; _other -> notHappyAtAll })

program = happySomeParser where
 happySomeParser = happyThen (happyParse 1) (\x -> case x of {HappyAbsSyn24 z -> happyReturn z; _other -> notHappyAtAll })

programLayout = happySomeParser where
 happySomeParser = happyThen (happyParse 2) (\x -> case x of {HappyAbsSyn24 z -> happyReturn z; _other -> notHappyAtAll })

expr = happySomeParser where
 happySomeParser = happyThen (happyParse 3) (\x -> case x of {HappyAbsSyn59 z -> happyReturn z; _other -> notHappyAtAll })

decl = happySomeParser where
 happySomeParser = happyThen (happyParse 4) (\x -> case x of {HappyAbsSyn38 z -> happyReturn z; _other -> notHappyAtAll })

decls = happySomeParser where
 happySomeParser = happyThen (happyParse 5) (\x -> case x of {HappyAbsSyn39 z -> happyReturn z; _other -> notHappyAtAll })

declsLayout = happySomeParser where
 happySomeParser = happyThen (happyParse 6) (\x -> case x of {HappyAbsSyn39 z -> happyReturn z; _other -> notHappyAtAll })

letDecl = happySomeParser where
 happySomeParser = happyThen (happyParse 7) (\x -> case x of {HappyAbsSyn38 z -> happyReturn z; _other -> notHappyAtAll })

repl = happySomeParser where
 happySomeParser = happyThen (happyParse 8) (\x -> case x of {HappyAbsSyn53 z -> happyReturn z; _other -> notHappyAtAll })

schema = happySomeParser where
 happySomeParser = happyThen (happyParse 9) (\x -> case x of {HappyAbsSyn94 z -> happyReturn z; _other -> notHappyAtAll })

modName = happySomeParser where
 happySomeParser = happyThen (happyParse 10) (\x -> case x of {HappyAbsSyn114 z -> happyReturn z; _other -> notHappyAtAll })

helpName = happySomeParser where
 happySomeParser = happyThen (happyParse 11) (\x -> case x of {HappyAbsSyn116 z -> happyReturn z; _other -> notHappyAtAll })

happySeq = happyDontSeq


parseModName :: String -> Maybe ModName
parseModName txt =
  case parseString defaultConfig { cfgModuleScope = False } modName txt of
    Right a -> Just (thing a)
    Left _  -> Nothing

parseHelpName :: String -> Maybe PName
parseHelpName txt =
  case parseString defaultConfig { cfgModuleScope = False } helpName txt of
    Right a -> Just (thing a)
    Left _  -> Nothing

addImplicitIncludes :: Config -> Program PName -> Program PName
addImplicitIncludes cfg (Program ds) =
  Program $ map path (cfgAutoInclude cfg) ++ ds
  where path p = Include Located { srcRange = rng, thing = p }
        rng    = Range { source = cfgSource cfg, from = start, to = start }


parseProgramWith :: Config -> Text -> Either ParseError (Program PName)
parseProgramWith cfg s = case res s of
                          Left err -> Left err
                          Right a  -> Right (addImplicitIncludes cfg a)
  where
  res = parse cfg $ case cfgLayout cfg of
                      Layout   -> programLayout
                      NoLayout -> program

parseModule :: Config -> Text -> Either ParseError (Module PName)
parseModule cfg = parse cfg { cfgModuleScope = True } vmodule

parseProgram :: Layout -> Text -> Either ParseError (Program PName)
parseProgram l = parseProgramWith defaultConfig { cfgLayout = l }

parseExprWith :: Config -> Text -> Either ParseError (Expr PName)
parseExprWith cfg = parse cfg { cfgModuleScope = False } expr

parseExpr :: Text -> Either ParseError (Expr PName)
parseExpr = parseExprWith defaultConfig

parseDeclWith :: Config -> Text -> Either ParseError (Decl PName)
parseDeclWith cfg = parse cfg { cfgModuleScope = False } decl

parseDecl :: Text -> Either ParseError (Decl PName)
parseDecl = parseDeclWith defaultConfig

parseDeclsWith :: Config -> Text -> Either ParseError [Decl PName]
parseDeclsWith cfg = parse cfg { cfgModuleScope = ms } decls'
  where (ms, decls') = case cfgLayout cfg of
                         Layout   -> (True, declsLayout)
                         NoLayout -> (False, decls)

parseDecls :: Text -> Either ParseError [Decl PName]
parseDecls = parseDeclsWith defaultConfig

parseLetDeclWith :: Config -> Text -> Either ParseError (Decl PName)
parseLetDeclWith cfg = parse cfg { cfgModuleScope = False } letDecl

parseLetDecl :: Text -> Either ParseError (Decl PName)
parseLetDecl = parseLetDeclWith defaultConfig

parseReplWith :: Config -> Text -> Either ParseError (ReplInput PName)
parseReplWith cfg = parse cfg { cfgModuleScope = False } repl

parseRepl :: Text -> Either ParseError (ReplInput PName)
parseRepl = parseReplWith defaultConfig

parseSchemaWith :: Config -> Text -> Either ParseError (Schema PName)
parseSchemaWith cfg = parse cfg { cfgModuleScope = False } schema

parseSchema :: Text -> Either ParseError (Schema PName)
parseSchema = parseSchemaWith defaultConfig

-- vim: ft=haskell
{-# LINE 1 "templates/GenericTemplate.hs" #-}
-- $Id: GenericTemplate.hs,v 1.26 2005/01/14 14:47:22 simonmar Exp $










































data Happy_IntList = HappyCons Prelude.Int Happy_IntList

































happyTrace string expr = Happy_System_IO_Unsafe.unsafePerformIO $ do
    Happy_System_IO.hPutStr Happy_System_IO.stderr string
    return expr




infixr 9 `HappyStk`
data HappyStk a = HappyStk a (HappyStk a)

-----------------------------------------------------------------------------
-- starting the parse

happyParse start_state = happyNewToken start_state notHappyAtAll notHappyAtAll

-----------------------------------------------------------------------------
-- Accepting the parse

-- If the current token is ERROR_TOK, it means we've just accepted a partial
-- parse (a %partial parser).  We must ignore the saved token on the top of
-- the stack in this case.
happyAccept (0) tk st sts (_ `HappyStk` ans `HappyStk` _) =
        happyReturn1 ans
happyAccept j tk st sts (HappyStk ans _) = 
         (happyReturn1 ans)

-----------------------------------------------------------------------------
-- Arrays only: do the next action



happyDoAction i tk st
        = (happyTrace ("state: " ++ show (st) ++ 
                      ",\ttoken: " ++ show (i) ++
                      ",\taction: ")) $
          case action of
                (0)           -> (happyTrace ("fail.\n")) $
                                     happyFail (happyExpListPerState ((st) :: Prelude.Int)) i tk st
                (-1)          -> (happyTrace ("accept.\n")) $
                                     happyAccept i tk st
                n | (n Prelude.< ((0) :: Prelude.Int)) -> (happyTrace ("reduce (rule " ++ show rule
                                                               ++ ")")) $
                                                   (happyReduceArr Happy_Data_Array.! rule) i tk st
                                                   where rule = ((Prelude.negate ((n Prelude.+ ((1) :: Prelude.Int)))))
                n                 -> (happyTrace ("shift, enter state "
                                                 ++ show (new_state)
                                                 ++ "\n")) $
                                     happyShift new_state i tk st
                                     where new_state = (n Prelude.- ((1) :: Prelude.Int))
   where off    = happyAdjustOffset (indexShortOffAddr happyActOffsets st)
         off_i  = (off Prelude.+ i)
         check  = if (off_i Prelude.>= ((0) :: Prelude.Int))
                  then (indexShortOffAddr happyCheck off_i Prelude.== i)
                  else Prelude.False
         action
          | check     = indexShortOffAddr happyTable off_i
          | Prelude.otherwise = indexShortOffAddr happyDefActions st












indexShortOffAddr arr off = arr Happy_Data_Array.! off


{-# INLINE happyLt #-}
happyLt x y = (x Prelude.< y)






readArrayBit arr bit =
    Bits.testBit (indexShortOffAddr arr (bit `Prelude.div` 16)) (bit `Prelude.mod` 16)






-----------------------------------------------------------------------------
-- HappyState data type (not arrays)













-----------------------------------------------------------------------------
-- Shifting a token

happyShift new_state (0) tk st sts stk@(x `HappyStk` _) =
     let i = (case x of { HappyErrorToken (i) -> i }) in
--     trace "shifting the error token" $
     happyDoAction i tk new_state (HappyCons (st) (sts)) (stk)

happyShift new_state i tk st sts stk =
     happyNewToken new_state (HappyCons (st) (sts)) ((HappyTerminal (tk))`HappyStk`stk)

-- happyReduce is specialised for the common cases.

happySpecReduce_0 i fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happySpecReduce_0 nt fn j tk st@((action)) sts stk
     = happyGoto nt j tk st (HappyCons (st) (sts)) (fn `HappyStk` stk)

happySpecReduce_1 i fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happySpecReduce_1 nt fn j tk _ sts@((HappyCons (st@(action)) (_))) (v1`HappyStk`stk')
     = let r = fn v1 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_2 i fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happySpecReduce_2 nt fn j tk _ (HappyCons (_) (sts@((HappyCons (st@(action)) (_))))) (v1`HappyStk`v2`HappyStk`stk')
     = let r = fn v1 v2 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happySpecReduce_3 i fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happySpecReduce_3 nt fn j tk _ (HappyCons (_) ((HappyCons (_) (sts@((HappyCons (st@(action)) (_))))))) (v1`HappyStk`v2`HappyStk`v3`HappyStk`stk')
     = let r = fn v1 v2 v3 in
       happySeq r (happyGoto nt j tk st sts (r `HappyStk` stk'))

happyReduce k i fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happyReduce k nt fn j tk st sts stk
     = case happyDrop (k Prelude.- ((1) :: Prelude.Int)) sts of
         sts1@((HappyCons (st1@(action)) (_))) ->
                let r = fn stk in  -- it doesn't hurt to always seq here...
                happyDoSeq r (happyGoto nt j tk st1 sts1 r)

happyMonadReduce k nt fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happyMonadReduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
          let drop_stk = happyDropStk k stk in
          happyThen1 (fn stk tk) (\r -> happyGoto nt j tk st1 sts1 (r `HappyStk` drop_stk))

happyMonad2Reduce k nt fn (0) tk st sts stk
     = happyFail [] (0) tk st sts stk
happyMonad2Reduce k nt fn j tk st sts stk =
      case happyDrop k (HappyCons (st) (sts)) of
        sts1@((HappyCons (st1@(action)) (_))) ->
         let drop_stk = happyDropStk k stk

             off = happyAdjustOffset (indexShortOffAddr happyGotoOffsets st1)
             off_i = (off Prelude.+ nt)
             new_state = indexShortOffAddr happyTable off_i




          in
          happyThen1 (fn stk tk) (\r -> happyNewToken new_state sts1 (r `HappyStk` drop_stk))

happyDrop (0) l = l
happyDrop n (HappyCons (_) (t)) = happyDrop (n Prelude.- ((1) :: Prelude.Int)) t

happyDropStk (0) l = l
happyDropStk n (x `HappyStk` xs) = happyDropStk (n Prelude.- ((1)::Prelude.Int)) xs

-----------------------------------------------------------------------------
-- Moving to a new state after a reduction


happyGoto nt j tk st = 
   (happyTrace (", goto state " ++ show (new_state) ++ "\n")) $
   happyDoAction j tk new_state
   where off = happyAdjustOffset (indexShortOffAddr happyGotoOffsets st)
         off_i = (off Prelude.+ nt)
         new_state = indexShortOffAddr happyTable off_i




-----------------------------------------------------------------------------
-- Error recovery (ERROR_TOK is the error token)

-- parse error if we are in recovery and we fail again
happyFail explist (0) tk old_st _ stk@(x `HappyStk` _) =
     let i = (case x of { HappyErrorToken (i) -> i }) in
--      trace "failing" $ 
        happyError_ explist i tk

{-  We don't need state discarding for our restricted implementation of
    "error".  In fact, it can cause some bogus parses, so I've disabled it
    for now --SDM

-- discard a state
happyFail  ERROR_TOK tk old_st CONS(HAPPYSTATE(action),sts) 
                                                (saved_tok `HappyStk` _ `HappyStk` stk) =
--      trace ("discarding state, depth " ++ show (length stk))  $
        DO_ACTION(action,ERROR_TOK,tk,sts,(saved_tok`HappyStk`stk))
-}

-- Enter error recovery: generate an error token,
--                       save the old token and carry on.
happyFail explist i tk (action) sts stk =
--      trace "entering error recovery" $
        happyDoAction (0) tk action sts ((HappyErrorToken (i)) `HappyStk` stk)

-- Internal happy errors:

notHappyAtAll :: a
notHappyAtAll = Prelude.error "Internal Happy error\n"

-----------------------------------------------------------------------------
-- Hack to get the typechecker to accept our action functions







-----------------------------------------------------------------------------
-- Seq-ing.  If the --strict flag is given, then Happy emits 
--      happySeq = happyDoSeq
-- otherwise it emits
--      happySeq = happyDontSeq

happyDoSeq, happyDontSeq :: a -> b -> b
happyDoSeq   a b = a `Prelude.seq` b
happyDontSeq a b = b

-----------------------------------------------------------------------------
-- Don't inline any functions from the template.  GHC has a nasty habit
-- of deciding to inline happyGoto everywhere, which increases the size of
-- the generated parser quite a bit.


{-# NOINLINE happyDoAction #-}
{-# NOINLINE happyTable #-}
{-# NOINLINE happyCheck #-}
{-# NOINLINE happyActOffsets #-}
{-# NOINLINE happyGotoOffsets #-}
{-# NOINLINE happyDefActions #-}

{-# NOINLINE happyShift #-}
{-# NOINLINE happySpecReduce_0 #-}
{-# NOINLINE happySpecReduce_1 #-}
{-# NOINLINE happySpecReduce_2 #-}
{-# NOINLINE happySpecReduce_3 #-}
{-# NOINLINE happyReduce #-}
{-# NOINLINE happyMonadReduce #-}
{-# NOINLINE happyGoto #-}
{-# NOINLINE happyFail #-}

-- end of Happy Template.
